
CAN_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080035f4  080035f4  000045f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080036f4  080036f4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036f4  080036f4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f4  080036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036f8  080036f8  000046f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080036fc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  08003764  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003764  00005294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009184  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1d  00000000  00000000  0000e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0000ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000666  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001835c  00000000  00000000  00010e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab3c  00000000  00000000  00029182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865e3  00000000  00000000  00033cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba2a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000ba2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000bcb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080035dc 	.word	0x080035dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080035dc 	.word	0x080035dc

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b17      	ldr	r3, [pc, #92]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000152:	4a18      	ldr	r2, [pc, #96]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000156:	4b16      	ldr	r3, [pc, #88]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000158:	2204      	movs	r2, #4
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b14      	ldr	r3, [pc, #80]	@ (80001b0 <MX_CAN_Init+0x64>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b13      	ldr	r3, [pc, #76]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000168:	4b11      	ldr	r3, [pc, #68]	@ (80001b0 <MX_CAN_Init+0x64>)
 800016a:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000170:	4b0f      	ldr	r3, [pc, #60]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000172:	2200      	movs	r2, #0
 8000174:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000176:	4b0e      	ldr	r3, [pc, #56]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000178:	2200      	movs	r2, #0
 800017a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017c:	4b0c      	ldr	r3, [pc, #48]	@ (80001b0 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000182:	4b0b      	ldr	r3, [pc, #44]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000188:	4b09      	ldr	r3, [pc, #36]	@ (80001b0 <MX_CAN_Init+0x64>)
 800018a:	2201      	movs	r2, #1
 800018c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800018e:	4b08      	ldr	r3, [pc, #32]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000194:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019a:	4805      	ldr	r0, [pc, #20]	@ (80001b0 <MX_CAN_Init+0x64>)
 800019c:	f000 fc1e 	bl	80009dc <HAL_CAN_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80001a6:	f000 f9f8 	bl	800059a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000084 	.word	0x20000084
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0310 	add.w	r3, r7, #16
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a28      	ldr	r2, [pc, #160]	@ (8000274 <HAL_CAN_MspInit+0xbc>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d149      	bne.n	800026c <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b27      	ldr	r3, [pc, #156]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a26      	ldr	r2, [pc, #152]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a20      	ldr	r2, [pc, #128]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000208:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800020c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4817      	ldr	r0, [pc, #92]	@ (800027c <HAL_CAN_MspInit+0xc4>)
 800021e:	f001 fa53 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4811      	ldr	r0, [pc, #68]	@ (800027c <HAL_CAN_MspInit+0xc4>)
 8000238:	f001 fa46 	bl	80016c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2013      	movs	r0, #19
 8000242:	f001 fa0a 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000246:	2013      	movs	r0, #19
 8000248:	f001 fa23 	bl	8001692 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2014      	movs	r0, #20
 8000252:	f001 fa02 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000256:	2014      	movs	r0, #20
 8000258:	f001 fa1b 	bl	8001692 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800025c:	2200      	movs	r2, #0
 800025e:	2100      	movs	r1, #0
 8000260:	2015      	movs	r0, #21
 8000262:	f001 f9fa 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000266:	2015      	movs	r0, #21
 8000268:	f001 fa13 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40006400 	.word	0x40006400
 8000278:	40021000 	.word	0x40021000
 800027c:	40010800 	.word	0x40010800

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000294:	4b2d      	ldr	r3, [pc, #180]	@ (800034c <MX_GPIO_Init+0xcc>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a2c      	ldr	r2, [pc, #176]	@ (800034c <MX_GPIO_Init+0xcc>)
 800029a:	f043 0310 	orr.w	r3, r3, #16
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b2a      	ldr	r3, [pc, #168]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0310 	and.w	r3, r3, #16
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ac:	4b27      	ldr	r3, [pc, #156]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a26      	ldr	r2, [pc, #152]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b24      	ldr	r3, [pc, #144]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0320 	and.w	r3, r3, #32
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c4:	4b21      	ldr	r3, [pc, #132]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a20      	ldr	r2, [pc, #128]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1e      	ldr	r3, [pc, #120]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0304 	and.w	r3, r3, #4
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1a      	ldr	r2, [pc, #104]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	603b      	str	r3, [r7, #0]
 80002f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2120      	movs	r1, #32
 80002f8:	4815      	ldr	r0, [pc, #84]	@ (8000350 <MX_GPIO_Init+0xd0>)
 80002fa:	f001 fb69 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <MX_GPIO_Init+0xd4>)
 8000306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	4619      	mov	r1, r3
 8000312:	4811      	ldr	r0, [pc, #68]	@ (8000358 <MX_GPIO_Init+0xd8>)
 8000314:	f001 f9d8 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000318:	2320      	movs	r3, #32
 800031a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2302      	movs	r3, #2
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	4619      	mov	r1, r3
 800032e:	4808      	ldr	r0, [pc, #32]	@ (8000350 <MX_GPIO_Init+0xd0>)
 8000330:	f001 f9ca 	bl	80016c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000334:	2200      	movs	r2, #0
 8000336:	2100      	movs	r1, #0
 8000338:	2028      	movs	r0, #40	@ 0x28
 800033a:	f001 f98e 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800033e:	2028      	movs	r0, #40	@ 0x28
 8000340:	f001 f9a7 	bl	8001692 <HAL_NVIC_EnableIRQ>

}
 8000344:	bf00      	nop
 8000346:	3720      	adds	r7, #32
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40021000 	.word	0x40021000
 8000350:	40010800 	.word	0x40010800
 8000354:	10110000 	.word	0x10110000
 8000358:	40011000 	.word	0x40011000

0800035c <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHARPROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFF);
 8000364:	1d39      	adds	r1, r7, #4
 8000366:	23ff      	movs	r3, #255	@ 0xff
 8000368:	2201      	movs	r2, #1
 800036a:	4804      	ldr	r0, [pc, #16]	@ (800037c <__io_putchar+0x20>)
 800036c:	f001 ffca 	bl	8002304 <HAL_UART_Transmit>

  return ch;
 8000370:	687b      	ldr	r3, [r7, #4]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000fc 	.word	0x200000fc

08000380 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000382:	b089      	sub	sp, #36	@ 0x24
 8000384:	af06      	add	r7, sp, #24
 8000386:	6078      	str	r0, [r7, #4]
  printf("%s\r\n", __FUNCTION__);
 8000388:	4926      	ldr	r1, [pc, #152]	@ (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800038a:	4827      	ldr	r0, [pc, #156]	@ (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800038c:	f002 fa50 	bl	8002830 <iprintf>
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000390:	4b26      	ldr	r3, [pc, #152]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000392:	4a27      	ldr	r2, [pc, #156]	@ (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000394:	2100      	movs	r1, #0
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 fd28 	bl	8000dec <HAL_CAN_GetRxMessage>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
  {
    /* Reception Error */
    Error_Handler();
 80003a2:	f000 f8fa 	bl	800059a <Error_Handler>
  }

  printf("StdID: %04lx, IDE: %ld, DLC: %ld\r\n", RxHeader.StdId, RxHeader.IDE, RxHeader.DLC);
 80003a6:	4b22      	ldr	r3, [pc, #136]	@ (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80003a8:	6819      	ldr	r1, [r3, #0]
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	4b20      	ldr	r3, [pc, #128]	@ (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80003b0:	691b      	ldr	r3, [r3, #16]
 80003b2:	4820      	ldr	r0, [pc, #128]	@ (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80003b4:	f002 fa3c 	bl	8002830 <iprintf>
  printf("Data: %d %d %d %d %d %d %d %d\r\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80003b8:	4b1c      	ldr	r3, [pc, #112]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461d      	mov	r5, r3
 80003be:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	461e      	mov	r6, r3
 80003c4:	4b19      	ldr	r3, [pc, #100]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	469c      	mov	ip, r3
 80003ca:	4b18      	ldr	r3, [pc, #96]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003cc:	78db      	ldrb	r3, [r3, #3]
 80003ce:	461a      	mov	r2, r3
 80003d0:	4b16      	ldr	r3, [pc, #88]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	4619      	mov	r1, r3
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003d8:	795b      	ldrb	r3, [r3, #5]
 80003da:	4618      	mov	r0, r3
 80003dc:	4b13      	ldr	r3, [pc, #76]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003de:	799b      	ldrb	r3, [r3, #6]
 80003e0:	461c      	mov	r4, r3
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003e4:	79db      	ldrb	r3, [r3, #7]
 80003e6:	9304      	str	r3, [sp, #16]
 80003e8:	9403      	str	r4, [sp, #12]
 80003ea:	9002      	str	r0, [sp, #8]
 80003ec:	9101      	str	r1, [sp, #4]
 80003ee:	9200      	str	r2, [sp, #0]
 80003f0:	4663      	mov	r3, ip
 80003f2:	4632      	mov	r2, r6
 80003f4:	4629      	mov	r1, r5
 80003f6:	4810      	ldr	r0, [pc, #64]	@ (8000438 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80003f8:	f002 fa1a 	bl	8002830 <iprintf>

  /* Control LED based on RxData[0] */
  if (RxData[0] == 1)
 80003fc:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d105      	bne.n	8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Turn LED ON
 8000404:	2201      	movs	r2, #1
 8000406:	2120      	movs	r1, #32
 8000408:	480c      	ldr	r0, [pc, #48]	@ (800043c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800040a:	f001 fae1 	bl	80019d0 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED OFF
  }
}
 800040e:	e004      	b.n	800041a <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED OFF
 8000410:	2200      	movs	r2, #0
 8000412:	2120      	movs	r1, #32
 8000414:	4809      	ldr	r0, [pc, #36]	@ (800043c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000416:	f001 fadb 	bl	80019d0 <HAL_GPIO_WritePin>
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000422:	bf00      	nop
 8000424:	08003658 	.word	0x08003658
 8000428:	080035f4 	.word	0x080035f4
 800042c:	200000f0 	.word	0x200000f0
 8000430:	200000d4 	.word	0x200000d4
 8000434:	080035fc 	.word	0x080035fc
 8000438:	08003620 	.word	0x08003620
 800043c:	40010800 	.word	0x40010800

08000440 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  printf("%s\r\n", __FUNCTION__);
 8000448:	4903      	ldr	r1, [pc, #12]	@ (8000458 <HAL_CAN_ErrorCallback+0x18>)
 800044a:	4804      	ldr	r0, [pc, #16]	@ (800045c <HAL_CAN_ErrorCallback+0x1c>)
 800044c:	f002 f9f0 	bl	8002830 <iprintf>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	0800367c 	.word	0x0800367c
 800045c:	080035f4 	.word	0x080035f4

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000464:	f000 fa58 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000468:	f000 f856 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046c:	f7ff ff08 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000470:	f000 f9c4 	bl	80007fc <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000474:	f7ff fe6a 	bl	800014c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2120      	movs	r1, #32
 800047c:	4821      	ldr	r0, [pc, #132]	@ (8000504 <main+0xa4>)
 800047e:	f001 faa7 	bl	80019d0 <HAL_GPIO_WritePin>

  printf("Start\r\n");
 8000482:	4821      	ldr	r0, [pc, #132]	@ (8000508 <main+0xa8>)
 8000484:	f002 fa3c 	bl	8002900 <puts>

  sFilterConfig.FilterBank = 0;
 8000488:	4b20      	ldr	r3, [pc, #128]	@ (800050c <main+0xac>)
 800048a:	2200      	movs	r2, #0
 800048c:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800048e:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <main+0xac>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000494:	4b1d      	ldr	r3, [pc, #116]	@ (800050c <main+0xac>)
 8000496:	2201      	movs	r2, #1
 8000498:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800049a:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <main+0xac>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <main+0xac>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004a6:	4b19      	ldr	r3, [pc, #100]	@ (800050c <main+0xac>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80004ac:	4b17      	ldr	r3, [pc, #92]	@ (800050c <main+0xac>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004b2:	4b16      	ldr	r3, [pc, #88]	@ (800050c <main+0xac>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80004b8:	4b14      	ldr	r3, [pc, #80]	@ (800050c <main+0xac>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80004be:	4b13      	ldr	r3, [pc, #76]	@ (800050c <main+0xac>)
 80004c0:	220e      	movs	r2, #14
 80004c2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80004c4:	4911      	ldr	r1, [pc, #68]	@ (800050c <main+0xac>)
 80004c6:	4812      	ldr	r0, [pc, #72]	@ (8000510 <main+0xb0>)
 80004c8:	f000 fb83 	bl	8000bd2 <HAL_CAN_ConfigFilter>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <main+0x76>
  {
    /* Filter configuration Error */
    Error_Handler();
 80004d2:	f000 f862 	bl	800059a <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80004d6:	480e      	ldr	r0, [pc, #56]	@ (8000510 <main+0xb0>)
 80004d8:	f000 fc44 	bl	8000d64 <HAL_CAN_Start>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <main+0x86>
  {
    /* Start Error */
    Error_Handler();
 80004e2:	f000 f85a 	bl	800059a <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80004e6:	2102      	movs	r1, #2
 80004e8:	4809      	ldr	r0, [pc, #36]	@ (8000510 <main+0xb0>)
 80004ea:	f000 fda0 	bl	800102e <HAL_CAN_ActivateNotification>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <main+0x98>
  {
    /* Notification Error */
    Error_Handler();
 80004f4:	f000 f851 	bl	800059a <Error_Handler>
  }

  printf("Can Ready!!\r\n");
 80004f8:	4806      	ldr	r0, [pc, #24]	@ (8000514 <main+0xb4>)
 80004fa:	f002 fa01 	bl	8002900 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	bf00      	nop
 8000500:	e7fd      	b.n	80004fe <main+0x9e>
 8000502:	bf00      	nop
 8000504:	40010800 	.word	0x40010800
 8000508:	08003640 	.word	0x08003640
 800050c:	200000ac 	.word	0x200000ac
 8000510:	20000084 	.word	0x20000084
 8000514:	08003648 	.word	0x08003648

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b090      	sub	sp, #64	@ 0x40
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0318 	add.w	r3, r7, #24
 8000522:	2228      	movs	r2, #40	@ 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f002 faca 	bl	8002ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000542:	2310      	movs	r3, #16
 8000544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800054a:	2300      	movs	r3, #0
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800054e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	4618      	mov	r0, r3
 800055a:	f001 fa73 	bl	8001a44 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000564:	f000 f819 	bl	800059a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2302      	movs	r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fce0 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800058e:	f000 f804 	bl	800059a <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3740      	adds	r7, #64	@ 0x40
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059e:	b672      	cpsid	i
}
 80005a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <NMI_Handler+0x4>

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <MemManage_Handler+0x4>

08000624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <UsageFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f9a2 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800066a:	f000 fd05 	bl	8001078 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000084 	.word	0x20000084

08000678 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800067e:	f000 fcfb 	bl	8001078 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000084 	.word	0x20000084

0800068c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <CAN1_RX1_IRQHandler+0x10>)
 8000692:	f000 fcf1 	bl	8001078 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000084 	.word	0x20000084

080006a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006a8:	f001 f9aa 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00a      	b.n	80006d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006c2:	f3af 8000 	nop.w
 80006c6:	4601      	mov	r1, r0
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	b2ca      	uxtb	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf0      	blt.n	80006c2 <_read+0x12>
  }

  return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe29 	bl	800035c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x12>
  }
  return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_close>:

int _close(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000748:	605a      	str	r2, [r3, #4]
  return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <_isatty>:

int _isatty(int file)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f002 f9d2 	bl	8002b5c <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20005000 	.word	0x20005000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	200000f8 	.word	0x200000f8
 80007ec:	20000298 	.word	0x20000298

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_USART2_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USART2_UART_Init+0x4c>)
 8000834:	f001 fd16 	bl	8002264 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f7ff feac 	bl	800059a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000fc 	.word	0x200000fc
 800084c:	40004400 	.word	0x40004400

08000850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <HAL_UART_MspInit+0x70>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d123      	bne.n	80008b8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_UART_MspInit+0x74>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <HAL_UART_MspInit+0x74>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_UART_MspInit+0x74>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <HAL_UART_MspInit+0x74>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <HAL_UART_MspInit+0x74>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <HAL_UART_MspInit+0x74>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a0:	230c      	movs	r3, #12
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <HAL_UART_MspInit+0x78>)
 80008b4:	f000 ff08 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40004400 	.word	0x40004400
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010800 	.word	0x40010800

080008cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008cc:	f7ff ff90 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008d2:	490c      	ldr	r1, [pc, #48]	@ (8000904 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000908 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a09      	ldr	r2, [pc, #36]	@ (800090c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e8:	4c09      	ldr	r4, [pc, #36]	@ (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f002 f937 	bl	8002b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff fdb1 	bl	8000460 <main>
  bx lr
 80008fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000908:	080036fc 	.word	0x080036fc
  ldr r2, =_sbss
 800090c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000910:	20000294 	.word	0x20000294

08000914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_2_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_Init+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	@ (8000940 <HAL_Init+0x28>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 fe8b 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f808 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff fe38 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_InitTick+0x54>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_InitTick+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fea3 	bl	80016ae <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 fe6b 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_InitTick+0x5c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a03      	ldr	r2, [pc, #12]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000144 	.word	0x20000144

080009c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	@ (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000144 	.word	0x20000144

080009dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e0ed      	b.n	8000bca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fbdc 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0201 	orr.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a10:	f7ff ffda 	bl	80009c8 <HAL_GetTick>
 8000a14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a16:	e012      	b.n	8000a3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a18:	f7ff ffd6 	bl	80009c8 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b0a      	cmp	r3, #10
 8000a24:	d90b      	bls.n	8000a3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2205      	movs	r2, #5
 8000a36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e0c5      	b.n	8000bca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0e5      	beq.n	8000a18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f022 0202 	bic.w	r2, r2, #2
 8000a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a5c:	f7ff ffb4 	bl	80009c8 <HAL_GetTick>
 8000a60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a62:	e012      	b.n	8000a8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a64:	f7ff ffb0 	bl	80009c8 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b0a      	cmp	r3, #10
 8000a70:	d90b      	bls.n	8000a8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2205      	movs	r2, #5
 8000a82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e09f      	b.n	8000bca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1e5      	bne.n	8000a64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7e1b      	ldrb	r3, [r3, #24]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d108      	bne.n	8000ab2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e007      	b.n	8000ac2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7e5b      	ldrb	r3, [r3, #25]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d108      	bne.n	8000adc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e007      	b.n	8000aec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7e9b      	ldrb	r3, [r3, #26]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d108      	bne.n	8000b06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f042 0220 	orr.w	r2, r2, #32
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e007      	b.n	8000b16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0220 	bic.w	r2, r2, #32
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7edb      	ldrb	r3, [r3, #27]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d108      	bne.n	8000b30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0210 	bic.w	r2, r2, #16
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	e007      	b.n	8000b40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 0210 	orr.w	r2, r2, #16
 8000b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7f1b      	ldrb	r3, [r3, #28]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d108      	bne.n	8000b5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0208 	orr.w	r2, r2, #8
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0208 	bic.w	r2, r2, #8
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7f5b      	ldrb	r3, [r3, #29]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f042 0204 	orr.w	r2, r2, #4
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 0204 	bic.w	r2, r2, #4
 8000b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	ea42 0103 	orr.w	r1, r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	1e5a      	subs	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b087      	sub	sp, #28
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bea:	7cfb      	ldrb	r3, [r7, #19]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d003      	beq.n	8000bf8 <HAL_CAN_ConfigFilter+0x26>
 8000bf0:	7cfb      	ldrb	r3, [r7, #19]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	f040 80aa 	bne.w	8000d4c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bfe:	f043 0201 	orr.w	r2, r3, #1
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f003 031f 	and.w	r3, r3, #31
 8000c10:	2201      	movs	r2, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d123      	bne.n	8000c7a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3248      	adds	r2, #72	@ 0x48
 8000c5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c70:	6979      	ldr	r1, [r7, #20]
 8000c72:	3348      	adds	r3, #72	@ 0x48
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d122      	bne.n	8000cc8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ca2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3248      	adds	r2, #72	@ 0x48
 8000ca8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cbe:	6979      	ldr	r1, [r7, #20]
 8000cc0:	3348      	adds	r3, #72	@ 0x48
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ce2:	e007      	b.n	8000cf4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d0e:	e007      	b.n	8000d20 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d107      	bne.n	8000d38 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	431a      	orrs	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d3e:	f023 0201 	bic.w	r2, r3, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e006      	b.n	8000d5a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d50:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
  }
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	371c      	adds	r7, #28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d12e      	bne.n	8000dd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d90:	f7ff fe1a 	bl	80009c8 <HAL_GetTick>
 8000d94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d96:	e012      	b.n	8000dbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d98:	f7ff fe16 	bl	80009c8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b0a      	cmp	r3, #10
 8000da4:	d90b      	bls.n	8000dbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000daa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2205      	movs	r2, #5
 8000db6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e012      	b.n	8000de4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1e5      	bne.n	8000d98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e006      	b.n	8000de4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dda:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
  }
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e00:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d003      	beq.n	8000e10 <HAL_CAN_GetRxMessage+0x24>
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	f040 8103 	bne.w	8001016 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10e      	bne.n	8000e34 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d116      	bne.n	8000e52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e0f7      	b.n	8001024 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d107      	bne.n	8000e52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0e8      	b.n	8001024 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	331b      	adds	r3, #27
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	4413      	add	r3, r2
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0204 	and.w	r2, r3, #4
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10c      	bne.n	8000e8a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	331b      	adds	r3, #27
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	0d5b      	lsrs	r3, r3, #21
 8000e80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e00b      	b.n	8000ea2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	331b      	adds	r3, #27
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	4413      	add	r3, r2
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	331b      	adds	r3, #27
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0202 	and.w	r2, r3, #2
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	331b      	adds	r3, #27
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0308 	and.w	r3, r3, #8
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	e00b      	b.n	8000ef0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	331b      	adds	r3, #27
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 020f 	and.w	r2, r3, #15
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	331b      	adds	r3, #27
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	4413      	add	r3, r2
 8000efc:	3304      	adds	r3, #4
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	331b      	adds	r3, #27
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	4413      	add	r3, r2
 8000f14:	3304      	adds	r3, #4
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	0c1b      	lsrs	r3, r3, #16
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	4413      	add	r3, r2
 8000f2a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0a1a      	lsrs	r2, r3, #8
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	4413      	add	r3, r2
 8000f5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0c1a      	lsrs	r2, r3, #16
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3302      	adds	r3, #2
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4413      	add	r3, r2
 8000f74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0e1a      	lsrs	r2, r3, #24
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	3303      	adds	r3, #3
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3304      	adds	r3, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0a1a      	lsrs	r2, r3, #8
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3305      	adds	r3, #5
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0c1a      	lsrs	r2, r3, #16
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	3306      	adds	r3, #6
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	4413      	add	r3, r2
 8000fda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0e1a      	lsrs	r2, r3, #24
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	3307      	adds	r3, #7
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d108      	bne.n	8001002 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0220 	orr.w	r2, r2, #32
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	e007      	b.n	8001012 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0220 	orr.w	r2, r2, #32
 8001010:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e006      	b.n	8001024 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
  }
}
 8001024:	4618      	mov	r0, r3
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d002      	beq.n	800104c <HAL_CAN_ActivateNotification+0x1e>
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d109      	bne.n	8001060 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6959      	ldr	r1, [r3, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	e006      	b.n	800106e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001064:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
  }
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d07c      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2201      	movs	r2, #1
 80010ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f983 	bl	80013e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80010e0:	e016      	b.n	8001110 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f4:	e00c      	b.n	8001110 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
 8001108:	e002      	b.n	8001110 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f986 	bl	800141c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001116:	2b00      	cmp	r3, #0
 8001118:	d024      	beq.n	8001164 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001122:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f962 	bl	80013f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001134:	e016      	b.n	8001164 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001142:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
 8001148:	e00c      	b.n	8001164 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
 800115c:	e002      	b.n	8001164 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f965 	bl	800142e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d024      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001176:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f941 	bl	800140a <HAL_CAN_TxMailbox2CompleteCallback>
 8001188:	e016      	b.n	80011b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
 800119c:	e00c      	b.n	80011b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b0:	e002      	b.n	80011b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f944 	bl	8001440 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00c      	beq.n	80011dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2210      	movs	r2, #16
 80011da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2208      	movs	r2, #8
 80011f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f92a 	bl	8001452 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff f8b2 	bl	8000380 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00c      	beq.n	8001240 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2210      	movs	r2, #16
 800123e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2208      	movs	r2, #8
 800125a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f90a 	bl	8001476 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	d009      	beq.n	8001280 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f8f2 	bl	8001464 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2210      	movs	r2, #16
 800129a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f8f3 	bl	8001488 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2208      	movs	r2, #8
 80012bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f8eb 	bl	800149a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d07b      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d072      	beq.n	80013be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d008      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	2b00      	cmp	r3, #0
 8001318:	d008      	beq.n	800132c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001332:	2b00      	cmp	r3, #0
 8001334:	d043      	beq.n	80013be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d03e      	beq.n	80013be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001346:	2b60      	cmp	r3, #96	@ 0x60
 8001348:	d02b      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x32a>
 800134a:	2b60      	cmp	r3, #96	@ 0x60
 800134c:	d82e      	bhi.n	80013ac <HAL_CAN_IRQHandler+0x334>
 800134e:	2b50      	cmp	r3, #80	@ 0x50
 8001350:	d022      	beq.n	8001398 <HAL_CAN_IRQHandler+0x320>
 8001352:	2b50      	cmp	r3, #80	@ 0x50
 8001354:	d82a      	bhi.n	80013ac <HAL_CAN_IRQHandler+0x334>
 8001356:	2b40      	cmp	r3, #64	@ 0x40
 8001358:	d019      	beq.n	800138e <HAL_CAN_IRQHandler+0x316>
 800135a:	2b40      	cmp	r3, #64	@ 0x40
 800135c:	d826      	bhi.n	80013ac <HAL_CAN_IRQHandler+0x334>
 800135e:	2b30      	cmp	r3, #48	@ 0x30
 8001360:	d010      	beq.n	8001384 <HAL_CAN_IRQHandler+0x30c>
 8001362:	2b30      	cmp	r3, #48	@ 0x30
 8001364:	d822      	bhi.n	80013ac <HAL_CAN_IRQHandler+0x334>
 8001366:	2b10      	cmp	r3, #16
 8001368:	d002      	beq.n	8001370 <HAL_CAN_IRQHandler+0x2f8>
 800136a:	2b20      	cmp	r3, #32
 800136c:	d005      	beq.n	800137a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800136e:	e01d      	b.n	80013ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001378:	e019      	b.n	80013ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001382:	e014      	b.n	80013ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800138c:	e00f      	b.n	80013ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001396:	e00a      	b.n	80013ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013a0:	e005      	b.n	80013ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013aa:	e000      	b.n	80013ae <HAL_CAN_IRQHandler+0x336>
            break;
 80013ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699a      	ldr	r2, [r3, #24]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80013bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2204      	movs	r2, #4
 80013c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff f831 	bl	8000440 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	@ 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4906      	ldr	r1, [pc, #24]	@ (8001544 <__NVIC_EnableIRQ+0x34>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	@ (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	@ (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	@ 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff90 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff2d 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff42 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff90 	bl	800159c <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5f 	bl	8001548 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff35 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b08b      	sub	sp, #44	@ 0x2c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	e169      	b.n	80019b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016dc:	2201      	movs	r2, #1
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8158 	bne.w	80019aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a9a      	ldr	r2, [pc, #616]	@ (8001968 <HAL_GPIO_Init+0x2a0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d05e      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001704:	4a98      	ldr	r2, [pc, #608]	@ (8001968 <HAL_GPIO_Init+0x2a0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d875      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 800170a:	4a98      	ldr	r2, [pc, #608]	@ (800196c <HAL_GPIO_Init+0x2a4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d058      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001710:	4a96      	ldr	r2, [pc, #600]	@ (800196c <HAL_GPIO_Init+0x2a4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d86f      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 8001716:	4a96      	ldr	r2, [pc, #600]	@ (8001970 <HAL_GPIO_Init+0x2a8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d052      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 800171c:	4a94      	ldr	r2, [pc, #592]	@ (8001970 <HAL_GPIO_Init+0x2a8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d869      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 8001722:	4a94      	ldr	r2, [pc, #592]	@ (8001974 <HAL_GPIO_Init+0x2ac>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d04c      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001728:	4a92      	ldr	r2, [pc, #584]	@ (8001974 <HAL_GPIO_Init+0x2ac>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d863      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 800172e:	4a92      	ldr	r2, [pc, #584]	@ (8001978 <HAL_GPIO_Init+0x2b0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d046      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001734:	4a90      	ldr	r2, [pc, #576]	@ (8001978 <HAL_GPIO_Init+0x2b0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d85d      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 800173a:	2b12      	cmp	r3, #18
 800173c:	d82a      	bhi.n	8001794 <HAL_GPIO_Init+0xcc>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d859      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 8001742:	a201      	add	r2, pc, #4	@ (adr r2, 8001748 <HAL_GPIO_Init+0x80>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	080017c3 	.word	0x080017c3
 800174c:	0800179d 	.word	0x0800179d
 8001750:	080017af 	.word	0x080017af
 8001754:	080017f1 	.word	0x080017f1
 8001758:	080017f7 	.word	0x080017f7
 800175c:	080017f7 	.word	0x080017f7
 8001760:	080017f7 	.word	0x080017f7
 8001764:	080017f7 	.word	0x080017f7
 8001768:	080017f7 	.word	0x080017f7
 800176c:	080017f7 	.word	0x080017f7
 8001770:	080017f7 	.word	0x080017f7
 8001774:	080017f7 	.word	0x080017f7
 8001778:	080017f7 	.word	0x080017f7
 800177c:	080017f7 	.word	0x080017f7
 8001780:	080017f7 	.word	0x080017f7
 8001784:	080017f7 	.word	0x080017f7
 8001788:	080017f7 	.word	0x080017f7
 800178c:	080017a5 	.word	0x080017a5
 8001790:	080017b9 	.word	0x080017b9
 8001794:	4a79      	ldr	r2, [pc, #484]	@ (800197c <HAL_GPIO_Init+0x2b4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800179a:	e02c      	b.n	80017f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	623b      	str	r3, [r7, #32]
          break;
 80017a2:	e029      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	3304      	adds	r3, #4
 80017aa:	623b      	str	r3, [r7, #32]
          break;
 80017ac:	e024      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	3308      	adds	r3, #8
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e01f      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	330c      	adds	r3, #12
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	e01a      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ca:	2304      	movs	r3, #4
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e013      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d8:	2308      	movs	r3, #8
 80017da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	611a      	str	r2, [r3, #16]
          break;
 80017e2:	e009      	b.n	80017f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e4:	2308      	movs	r3, #8
 80017e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	615a      	str	r2, [r3, #20]
          break;
 80017ee:	e003      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          break;
 80017f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2bff      	cmp	r3, #255	@ 0xff
 80017fc:	d801      	bhi.n	8001802 <HAL_GPIO_Init+0x13a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	e001      	b.n	8001806 <HAL_GPIO_Init+0x13e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3304      	adds	r3, #4
 8001806:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2bff      	cmp	r3, #255	@ 0xff
 800180c:	d802      	bhi.n	8001814 <HAL_GPIO_Init+0x14c>
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	e002      	b.n	800181a <HAL_GPIO_Init+0x152>
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	3b08      	subs	r3, #8
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	210f      	movs	r1, #15
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	401a      	ands	r2, r3
 800182c:	6a39      	ldr	r1, [r7, #32]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80b1 	beq.w	80019aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001848:	4b4d      	ldr	r3, [pc, #308]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a4c      	ldr	r2, [pc, #304]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b4a      	ldr	r3, [pc, #296]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001860:	4a48      	ldr	r2, [pc, #288]	@ (8001984 <HAL_GPIO_Init+0x2bc>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a40      	ldr	r2, [pc, #256]	@ (8001988 <HAL_GPIO_Init+0x2c0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d013      	beq.n	80018b4 <HAL_GPIO_Init+0x1ec>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3f      	ldr	r2, [pc, #252]	@ (800198c <HAL_GPIO_Init+0x2c4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00d      	beq.n	80018b0 <HAL_GPIO_Init+0x1e8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a3e      	ldr	r2, [pc, #248]	@ (8001990 <HAL_GPIO_Init+0x2c8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d007      	beq.n	80018ac <HAL_GPIO_Init+0x1e4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a3d      	ldr	r2, [pc, #244]	@ (8001994 <HAL_GPIO_Init+0x2cc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d101      	bne.n	80018a8 <HAL_GPIO_Init+0x1e0>
 80018a4:	2303      	movs	r3, #3
 80018a6:	e006      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e004      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018b4:	2300      	movs	r3, #0
 80018b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b8:	f002 0203 	and.w	r2, r2, #3
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	4093      	lsls	r3, r2
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018c6:	492f      	ldr	r1, [pc, #188]	@ (8001984 <HAL_GPIO_Init+0x2bc>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	492c      	ldr	r1, [pc, #176]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4928      	ldr	r1, [pc, #160]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4922      	ldr	r1, [pc, #136]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001916:	4b20      	ldr	r3, [pc, #128]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	491e      	ldr	r1, [pc, #120]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001920:	4013      	ands	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4918      	ldr	r1, [pc, #96]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800193e:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	4914      	ldr	r1, [pc, #80]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001948:	4013      	ands	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d021      	beq.n	800199c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	490e      	ldr	r1, [pc, #56]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	e021      	b.n	80019aa <HAL_GPIO_Init+0x2e2>
 8001966:	bf00      	nop
 8001968:	10320000 	.word	0x10320000
 800196c:	10310000 	.word	0x10310000
 8001970:	10220000 	.word	0x10220000
 8001974:	10210000 	.word	0x10210000
 8001978:	10120000 	.word	0x10120000
 800197c:	10110000 	.word	0x10110000
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011000 	.word	0x40011000
 8001994:	40011400 	.word	0x40011400
 8001998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_GPIO_Init+0x304>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	4909      	ldr	r1, [pc, #36]	@ (80019cc <HAL_GPIO_Init+0x304>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f47f ae8e 	bne.w	80016dc <HAL_GPIO_Init+0x14>
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	372c      	adds	r7, #44	@ 0x2c
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f806 	bl	8001a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010400 	.word	0x40010400

08001a30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e272      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b92      	ldr	r3, [pc, #584]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a70:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e24c      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b80      	ldr	r3, [pc, #512]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b78      	ldr	r3, [pc, #480]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a77      	ldr	r2, [pc, #476]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b72      	ldr	r3, [pc, #456]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a71      	ldr	r2, [pc, #452]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b68      	ldr	r3, [pc, #416]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a67      	ldr	r2, [pc, #412]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7fe ff52 	bl	80009c8 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7fe ff4e 	bl	80009c8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e200      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7fe ff3e 	bl	80009c8 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7fe ff3a 	bl	80009c8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	@ 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1ec      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8a:	4b49      	ldr	r3, [pc, #292]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
 8001b96:	4b46      	ldr	r3, [pc, #280]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1c0      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4939      	ldr	r1, [pc, #228]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7fe fef3 	bl	80009c8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7fe feef 	bl	80009c8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1a1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4927      	ldr	r1, [pc, #156]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7fe fed2 	bl	80009c8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7fe fece 	bl	80009c8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e180      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7fe feb2 	bl	80009c8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7fe feae 	bl	80009c8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e160      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 face 	bl	8002228 <RCC_Delay>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7fe fe98 	bl	80009c8 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7fe fe94 	bl	80009c8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e146      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	42420000 	.word	0x42420000
 8001cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b92      	ldr	r3, [pc, #584]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b8b      	ldr	r3, [pc, #556]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b88      	ldr	r3, [pc, #544]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a87      	ldr	r2, [pc, #540]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b85      	ldr	r3, [pc, #532]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b82      	ldr	r3, [pc, #520]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7e      	ldr	r2, [pc, #504]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fe55 	bl	80009c8 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7fe fe51 	bl	80009c8 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	@ 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e103      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b75      	ldr	r3, [pc, #468]	@ (8001f0c <HAL_RCC_OscConfig+0x4c8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x312>
 8001d48:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a69      	ldr	r2, [pc, #420]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b67      	ldr	r3, [pc, #412]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a66      	ldr	r2, [pc, #408]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x356>
 8001d80:	4b61      	ldr	r3, [pc, #388]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a60      	ldr	r2, [pc, #384]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a5d      	ldr	r2, [pc, #372]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b58      	ldr	r3, [pc, #352]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a57      	ldr	r2, [pc, #348]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7fe fe05 	bl	80009c8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe fe01 	bl	80009c8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0b1      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7fe fdef 	bl	80009c8 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7fe fdeb 	bl	80009c8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e09b      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4b40      	ldr	r3, [pc, #256]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8087 	beq.w	8001f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d061      	beq.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d146      	bne.n	8001ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe fdbf 	bl	80009c8 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe fdbb 	bl	80009c8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e06d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4921      	ldr	r1, [pc, #132]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a19      	ldr	r1, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	491b      	ldr	r1, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fd8f 	bl	80009c8 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe fd8b 	bl	80009c8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e03d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x46a>
 8001ecc:	e035      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fd78 	bl	80009c8 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fd74 	bl	80009c8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e026      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
 8001efa:	e01e      	b.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e019      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_OscConfig+0x500>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0d0      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b67      	ldr	r3, [pc, #412]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4965      	ldr	r1, [pc, #404]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d040      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e073      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4936      	ldr	r1, [pc, #216]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7fe fcc6 	bl	80009c8 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fcc2 	bl	80009c8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e053      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b27      	ldr	r3, [pc, #156]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d210      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4922      	ldr	r1, [pc, #136]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490a      	ldr	r1, [pc, #40]	@ (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <HAL_RCC_ClockConfig+0x1cc>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_RCC_ClockConfig+0x1d0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fc24 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000
 800210c:	40021000 	.word	0x40021000
 8002110:	08003694 	.word	0x08003694
 8002114:	20000000 	.word	0x20000000
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x30>
 8002146:	2b08      	cmp	r3, #8
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x36>
 800214a:	e027      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800214c:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800214e:	613b      	str	r3, [r7, #16]
      break;
 8002150:	e027      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d010      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0c5b      	lsrs	r3, r3, #17
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	fb03 f202 	mul.w	r2, r3, r2
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e004      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	613b      	str	r3, [r7, #16]
      break;
 800219a:	e002      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	613b      	str	r3, [r7, #16]
      break;
 80021a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a2:	693b      	ldr	r3, [r7, #16]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	007a1200 	.word	0x007a1200
 80021b8:	080036ac 	.word	0x080036ac
 80021bc:	080036bc 	.word	0x080036bc
 80021c0:	003d0900 	.word	0x003d0900

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b02      	ldr	r3, [pc, #8]	@ (80021d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021dc:	f7ff fff2 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4903      	ldr	r1, [pc, #12]	@ (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080036a4 	.word	0x080036a4

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002204:	f7ff ffde 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	@ (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	080036a4 	.word	0x080036a4

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002244:	bf00      	nop
  }
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000000 	.word	0x20000000
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e042      	b.n	80022fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fae0 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	@ 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f971 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d175      	bne.n	8002410 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_UART_Transmit+0x2c>
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e06e      	b.n	8002412 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2221      	movs	r2, #33	@ 0x21
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002342:	f7fe fb41 	bl	80009c8 <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235c:	d108      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e003      	b.n	8002378 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002378:	e02e      	b.n	80023d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	2180      	movs	r1, #128	@ 0x80
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f848 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e03a      	b.n	8002412 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3302      	adds	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e007      	b.n	80023ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1cb      	bne.n	800237a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2140      	movs	r1, #64	@ 0x40
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f814 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	e03b      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d037      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002434:	f7fe fac8 	bl	80009c8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <UART_WaitOnFlagUntilTimeout+0x30>
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e03a      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d023      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b80      	cmp	r3, #128	@ 0x80
 8002460:	d020      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d01d      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d116      	bne.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f81d 	bl	80024cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2208      	movs	r2, #8
 8002496:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e00f      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d0b4      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b095      	sub	sp, #84	@ 0x54
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024de:	e853 3f00 	ldrex	r3, [r3]
 80024e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e5      	bne.n	80024d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	61fb      	str	r3, [r7, #28]
   return(result);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3314      	adds	r3, #20
 8002526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800252e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002530:	e841 2300 	strex	r3, r2, [r1]
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e5      	bne.n	8002508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	60bb      	str	r3, [r7, #8]
   return(result);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 0310 	bic.w	r3, r3, #16
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002564:	61ba      	str	r2, [r7, #24]
 8002566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	6979      	ldr	r1, [r7, #20]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	613b      	str	r3, [r7, #16]
   return(result);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e5      	bne.n	8002544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002586:	bf00      	nop
 8002588:	3754      	adds	r7, #84	@ 0x54
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025ca:	f023 030c 	bic.w	r3, r3, #12
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2c      	ldr	r2, [pc, #176]	@ (80026a4 <UART_SetConfig+0x114>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d103      	bne.n	8002600 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f8:	f7ff fe02 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	e002      	b.n	8002606 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002600:	f7ff fdea 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8002604:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	4a22      	ldr	r2, [pc, #136]	@ (80026a8 <UART_SetConfig+0x118>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	0119      	lsls	r1, r3, #4
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <UART_SetConfig+0x118>)
 800263e:	fba3 0302 	umull	r0, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2064      	movs	r0, #100	@ 0x64
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	3332      	adds	r3, #50	@ 0x32
 8002650:	4a15      	ldr	r2, [pc, #84]	@ (80026a8 <UART_SetConfig+0x118>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800265c:	4419      	add	r1, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <UART_SetConfig+0x118>)
 8002676:	fba3 0302 	umull	r0, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2064      	movs	r0, #100	@ 0x64
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	3332      	adds	r3, #50	@ 0x32
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <UART_SetConfig+0x118>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	440a      	add	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40013800 	.word	0x40013800
 80026a8:	51eb851f 	.word	0x51eb851f

080026ac <std>:
 80026ac:	2300      	movs	r3, #0
 80026ae:	b510      	push	{r4, lr}
 80026b0:	4604      	mov	r4, r0
 80026b2:	e9c0 3300 	strd	r3, r3, [r0]
 80026b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026ba:	6083      	str	r3, [r0, #8]
 80026bc:	8181      	strh	r1, [r0, #12]
 80026be:	6643      	str	r3, [r0, #100]	@ 0x64
 80026c0:	81c2      	strh	r2, [r0, #14]
 80026c2:	6183      	str	r3, [r0, #24]
 80026c4:	4619      	mov	r1, r3
 80026c6:	2208      	movs	r2, #8
 80026c8:	305c      	adds	r0, #92	@ 0x5c
 80026ca:	f000 f9f9 	bl	8002ac0 <memset>
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <std+0x58>)
 80026d0:	6224      	str	r4, [r4, #32]
 80026d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <std+0x5c>)
 80026d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <std+0x60>)
 80026da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <std+0x64>)
 80026de:	6323      	str	r3, [r4, #48]	@ 0x30
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <std+0x68>)
 80026e2:	429c      	cmp	r4, r3
 80026e4:	d006      	beq.n	80026f4 <std+0x48>
 80026e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80026ea:	4294      	cmp	r4, r2
 80026ec:	d002      	beq.n	80026f4 <std+0x48>
 80026ee:	33d0      	adds	r3, #208	@ 0xd0
 80026f0:	429c      	cmp	r4, r3
 80026f2:	d105      	bne.n	8002700 <std+0x54>
 80026f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80026f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fc:	f000 ba58 	b.w	8002bb0 <__retarget_lock_init_recursive>
 8002700:	bd10      	pop	{r4, pc}
 8002702:	bf00      	nop
 8002704:	08002911 	.word	0x08002911
 8002708:	08002933 	.word	0x08002933
 800270c:	0800296b 	.word	0x0800296b
 8002710:	0800298f 	.word	0x0800298f
 8002714:	20000148 	.word	0x20000148

08002718 <stdio_exit_handler>:
 8002718:	4a02      	ldr	r2, [pc, #8]	@ (8002724 <stdio_exit_handler+0xc>)
 800271a:	4903      	ldr	r1, [pc, #12]	@ (8002728 <stdio_exit_handler+0x10>)
 800271c:	4803      	ldr	r0, [pc, #12]	@ (800272c <stdio_exit_handler+0x14>)
 800271e:	f000 b869 	b.w	80027f4 <_fwalk_sglue>
 8002722:	bf00      	nop
 8002724:	2000000c 	.word	0x2000000c
 8002728:	08003449 	.word	0x08003449
 800272c:	2000001c 	.word	0x2000001c

08002730 <cleanup_stdio>:
 8002730:	6841      	ldr	r1, [r0, #4]
 8002732:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <cleanup_stdio+0x34>)
 8002734:	b510      	push	{r4, lr}
 8002736:	4299      	cmp	r1, r3
 8002738:	4604      	mov	r4, r0
 800273a:	d001      	beq.n	8002740 <cleanup_stdio+0x10>
 800273c:	f000 fe84 	bl	8003448 <_fflush_r>
 8002740:	68a1      	ldr	r1, [r4, #8]
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <cleanup_stdio+0x38>)
 8002744:	4299      	cmp	r1, r3
 8002746:	d002      	beq.n	800274e <cleanup_stdio+0x1e>
 8002748:	4620      	mov	r0, r4
 800274a:	f000 fe7d 	bl	8003448 <_fflush_r>
 800274e:	68e1      	ldr	r1, [r4, #12]
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <cleanup_stdio+0x3c>)
 8002752:	4299      	cmp	r1, r3
 8002754:	d004      	beq.n	8002760 <cleanup_stdio+0x30>
 8002756:	4620      	mov	r0, r4
 8002758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800275c:	f000 be74 	b.w	8003448 <_fflush_r>
 8002760:	bd10      	pop	{r4, pc}
 8002762:	bf00      	nop
 8002764:	20000148 	.word	0x20000148
 8002768:	200001b0 	.word	0x200001b0
 800276c:	20000218 	.word	0x20000218

08002770 <global_stdio_init.part.0>:
 8002770:	b510      	push	{r4, lr}
 8002772:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <global_stdio_init.part.0+0x30>)
 8002774:	4c0b      	ldr	r4, [pc, #44]	@ (80027a4 <global_stdio_init.part.0+0x34>)
 8002776:	4a0c      	ldr	r2, [pc, #48]	@ (80027a8 <global_stdio_init.part.0+0x38>)
 8002778:	4620      	mov	r0, r4
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	2104      	movs	r1, #4
 800277e:	2200      	movs	r2, #0
 8002780:	f7ff ff94 	bl	80026ac <std>
 8002784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002788:	2201      	movs	r2, #1
 800278a:	2109      	movs	r1, #9
 800278c:	f7ff ff8e 	bl	80026ac <std>
 8002790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002794:	2202      	movs	r2, #2
 8002796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800279a:	2112      	movs	r1, #18
 800279c:	f7ff bf86 	b.w	80026ac <std>
 80027a0:	20000280 	.word	0x20000280
 80027a4:	20000148 	.word	0x20000148
 80027a8:	08002719 	.word	0x08002719

080027ac <__sfp_lock_acquire>:
 80027ac:	4801      	ldr	r0, [pc, #4]	@ (80027b4 <__sfp_lock_acquire+0x8>)
 80027ae:	f000 ba00 	b.w	8002bb2 <__retarget_lock_acquire_recursive>
 80027b2:	bf00      	nop
 80027b4:	20000289 	.word	0x20000289

080027b8 <__sfp_lock_release>:
 80027b8:	4801      	ldr	r0, [pc, #4]	@ (80027c0 <__sfp_lock_release+0x8>)
 80027ba:	f000 b9fb 	b.w	8002bb4 <__retarget_lock_release_recursive>
 80027be:	bf00      	nop
 80027c0:	20000289 	.word	0x20000289

080027c4 <__sinit>:
 80027c4:	b510      	push	{r4, lr}
 80027c6:	4604      	mov	r4, r0
 80027c8:	f7ff fff0 	bl	80027ac <__sfp_lock_acquire>
 80027cc:	6a23      	ldr	r3, [r4, #32]
 80027ce:	b11b      	cbz	r3, 80027d8 <__sinit+0x14>
 80027d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d4:	f7ff bff0 	b.w	80027b8 <__sfp_lock_release>
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <__sinit+0x28>)
 80027da:	6223      	str	r3, [r4, #32]
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <__sinit+0x2c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f5      	bne.n	80027d0 <__sinit+0xc>
 80027e4:	f7ff ffc4 	bl	8002770 <global_stdio_init.part.0>
 80027e8:	e7f2      	b.n	80027d0 <__sinit+0xc>
 80027ea:	bf00      	nop
 80027ec:	08002731 	.word	0x08002731
 80027f0:	20000280 	.word	0x20000280

080027f4 <_fwalk_sglue>:
 80027f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027f8:	4607      	mov	r7, r0
 80027fa:	4688      	mov	r8, r1
 80027fc:	4614      	mov	r4, r2
 80027fe:	2600      	movs	r6, #0
 8002800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002804:	f1b9 0901 	subs.w	r9, r9, #1
 8002808:	d505      	bpl.n	8002816 <_fwalk_sglue+0x22>
 800280a:	6824      	ldr	r4, [r4, #0]
 800280c:	2c00      	cmp	r4, #0
 800280e:	d1f7      	bne.n	8002800 <_fwalk_sglue+0xc>
 8002810:	4630      	mov	r0, r6
 8002812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002816:	89ab      	ldrh	r3, [r5, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d907      	bls.n	800282c <_fwalk_sglue+0x38>
 800281c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002820:	3301      	adds	r3, #1
 8002822:	d003      	beq.n	800282c <_fwalk_sglue+0x38>
 8002824:	4629      	mov	r1, r5
 8002826:	4638      	mov	r0, r7
 8002828:	47c0      	blx	r8
 800282a:	4306      	orrs	r6, r0
 800282c:	3568      	adds	r5, #104	@ 0x68
 800282e:	e7e9      	b.n	8002804 <_fwalk_sglue+0x10>

08002830 <iprintf>:
 8002830:	b40f      	push	{r0, r1, r2, r3}
 8002832:	b507      	push	{r0, r1, r2, lr}
 8002834:	4906      	ldr	r1, [pc, #24]	@ (8002850 <iprintf+0x20>)
 8002836:	ab04      	add	r3, sp, #16
 8002838:	6808      	ldr	r0, [r1, #0]
 800283a:	f853 2b04 	ldr.w	r2, [r3], #4
 800283e:	6881      	ldr	r1, [r0, #8]
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	f000 fad7 	bl	8002df4 <_vfiprintf_r>
 8002846:	b003      	add	sp, #12
 8002848:	f85d eb04 	ldr.w	lr, [sp], #4
 800284c:	b004      	add	sp, #16
 800284e:	4770      	bx	lr
 8002850:	20000018 	.word	0x20000018

08002854 <_puts_r>:
 8002854:	6a03      	ldr	r3, [r0, #32]
 8002856:	b570      	push	{r4, r5, r6, lr}
 8002858:	4605      	mov	r5, r0
 800285a:	460e      	mov	r6, r1
 800285c:	6884      	ldr	r4, [r0, #8]
 800285e:	b90b      	cbnz	r3, 8002864 <_puts_r+0x10>
 8002860:	f7ff ffb0 	bl	80027c4 <__sinit>
 8002864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002866:	07db      	lsls	r3, r3, #31
 8002868:	d405      	bmi.n	8002876 <_puts_r+0x22>
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	0598      	lsls	r0, r3, #22
 800286e:	d402      	bmi.n	8002876 <_puts_r+0x22>
 8002870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002872:	f000 f99e 	bl	8002bb2 <__retarget_lock_acquire_recursive>
 8002876:	89a3      	ldrh	r3, [r4, #12]
 8002878:	0719      	lsls	r1, r3, #28
 800287a:	d502      	bpl.n	8002882 <_puts_r+0x2e>
 800287c:	6923      	ldr	r3, [r4, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d135      	bne.n	80028ee <_puts_r+0x9a>
 8002882:	4621      	mov	r1, r4
 8002884:	4628      	mov	r0, r5
 8002886:	f000 f8c5 	bl	8002a14 <__swsetup_r>
 800288a:	b380      	cbz	r0, 80028ee <_puts_r+0x9a>
 800288c:	f04f 35ff 	mov.w	r5, #4294967295
 8002890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002892:	07da      	lsls	r2, r3, #31
 8002894:	d405      	bmi.n	80028a2 <_puts_r+0x4e>
 8002896:	89a3      	ldrh	r3, [r4, #12]
 8002898:	059b      	lsls	r3, r3, #22
 800289a:	d402      	bmi.n	80028a2 <_puts_r+0x4e>
 800289c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800289e:	f000 f989 	bl	8002bb4 <__retarget_lock_release_recursive>
 80028a2:	4628      	mov	r0, r5
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	da04      	bge.n	80028b4 <_puts_r+0x60>
 80028aa:	69a2      	ldr	r2, [r4, #24]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dc17      	bgt.n	80028e0 <_puts_r+0x8c>
 80028b0:	290a      	cmp	r1, #10
 80028b2:	d015      	beq.n	80028e0 <_puts_r+0x8c>
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	6022      	str	r2, [r4, #0]
 80028ba:	7019      	strb	r1, [r3, #0]
 80028bc:	68a3      	ldr	r3, [r4, #8]
 80028be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80028c2:	3b01      	subs	r3, #1
 80028c4:	60a3      	str	r3, [r4, #8]
 80028c6:	2900      	cmp	r1, #0
 80028c8:	d1ed      	bne.n	80028a6 <_puts_r+0x52>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da11      	bge.n	80028f2 <_puts_r+0x9e>
 80028ce:	4622      	mov	r2, r4
 80028d0:	210a      	movs	r1, #10
 80028d2:	4628      	mov	r0, r5
 80028d4:	f000 f85f 	bl	8002996 <__swbuf_r>
 80028d8:	3001      	adds	r0, #1
 80028da:	d0d7      	beq.n	800288c <_puts_r+0x38>
 80028dc:	250a      	movs	r5, #10
 80028de:	e7d7      	b.n	8002890 <_puts_r+0x3c>
 80028e0:	4622      	mov	r2, r4
 80028e2:	4628      	mov	r0, r5
 80028e4:	f000 f857 	bl	8002996 <__swbuf_r>
 80028e8:	3001      	adds	r0, #1
 80028ea:	d1e7      	bne.n	80028bc <_puts_r+0x68>
 80028ec:	e7ce      	b.n	800288c <_puts_r+0x38>
 80028ee:	3e01      	subs	r6, #1
 80028f0:	e7e4      	b.n	80028bc <_puts_r+0x68>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	6022      	str	r2, [r4, #0]
 80028f8:	220a      	movs	r2, #10
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e7ee      	b.n	80028dc <_puts_r+0x88>
	...

08002900 <puts>:
 8002900:	4b02      	ldr	r3, [pc, #8]	@ (800290c <puts+0xc>)
 8002902:	4601      	mov	r1, r0
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	f7ff bfa5 	b.w	8002854 <_puts_r>
 800290a:	bf00      	nop
 800290c:	20000018 	.word	0x20000018

08002910 <__sread>:
 8002910:	b510      	push	{r4, lr}
 8002912:	460c      	mov	r4, r1
 8002914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002918:	f000 f8fc 	bl	8002b14 <_read_r>
 800291c:	2800      	cmp	r0, #0
 800291e:	bfab      	itete	ge
 8002920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002922:	89a3      	ldrhlt	r3, [r4, #12]
 8002924:	181b      	addge	r3, r3, r0
 8002926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800292a:	bfac      	ite	ge
 800292c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800292e:	81a3      	strhlt	r3, [r4, #12]
 8002930:	bd10      	pop	{r4, pc}

08002932 <__swrite>:
 8002932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002936:	461f      	mov	r7, r3
 8002938:	898b      	ldrh	r3, [r1, #12]
 800293a:	4605      	mov	r5, r0
 800293c:	05db      	lsls	r3, r3, #23
 800293e:	460c      	mov	r4, r1
 8002940:	4616      	mov	r6, r2
 8002942:	d505      	bpl.n	8002950 <__swrite+0x1e>
 8002944:	2302      	movs	r3, #2
 8002946:	2200      	movs	r2, #0
 8002948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800294c:	f000 f8d0 	bl	8002af0 <_lseek_r>
 8002950:	89a3      	ldrh	r3, [r4, #12]
 8002952:	4632      	mov	r2, r6
 8002954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002958:	81a3      	strh	r3, [r4, #12]
 800295a:	4628      	mov	r0, r5
 800295c:	463b      	mov	r3, r7
 800295e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002966:	f000 b8e7 	b.w	8002b38 <_write_r>

0800296a <__sseek>:
 800296a:	b510      	push	{r4, lr}
 800296c:	460c      	mov	r4, r1
 800296e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002972:	f000 f8bd 	bl	8002af0 <_lseek_r>
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	bf15      	itete	ne
 800297c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800297e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002986:	81a3      	strheq	r3, [r4, #12]
 8002988:	bf18      	it	ne
 800298a:	81a3      	strhne	r3, [r4, #12]
 800298c:	bd10      	pop	{r4, pc}

0800298e <__sclose>:
 800298e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002992:	f000 b89d 	b.w	8002ad0 <_close_r>

08002996 <__swbuf_r>:
 8002996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002998:	460e      	mov	r6, r1
 800299a:	4614      	mov	r4, r2
 800299c:	4605      	mov	r5, r0
 800299e:	b118      	cbz	r0, 80029a8 <__swbuf_r+0x12>
 80029a0:	6a03      	ldr	r3, [r0, #32]
 80029a2:	b90b      	cbnz	r3, 80029a8 <__swbuf_r+0x12>
 80029a4:	f7ff ff0e 	bl	80027c4 <__sinit>
 80029a8:	69a3      	ldr	r3, [r4, #24]
 80029aa:	60a3      	str	r3, [r4, #8]
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	071a      	lsls	r2, r3, #28
 80029b0:	d501      	bpl.n	80029b6 <__swbuf_r+0x20>
 80029b2:	6923      	ldr	r3, [r4, #16]
 80029b4:	b943      	cbnz	r3, 80029c8 <__swbuf_r+0x32>
 80029b6:	4621      	mov	r1, r4
 80029b8:	4628      	mov	r0, r5
 80029ba:	f000 f82b 	bl	8002a14 <__swsetup_r>
 80029be:	b118      	cbz	r0, 80029c8 <__swbuf_r+0x32>
 80029c0:	f04f 37ff 	mov.w	r7, #4294967295
 80029c4:	4638      	mov	r0, r7
 80029c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	6922      	ldr	r2, [r4, #16]
 80029cc:	b2f6      	uxtb	r6, r6
 80029ce:	1a98      	subs	r0, r3, r2
 80029d0:	6963      	ldr	r3, [r4, #20]
 80029d2:	4637      	mov	r7, r6
 80029d4:	4283      	cmp	r3, r0
 80029d6:	dc05      	bgt.n	80029e4 <__swbuf_r+0x4e>
 80029d8:	4621      	mov	r1, r4
 80029da:	4628      	mov	r0, r5
 80029dc:	f000 fd34 	bl	8003448 <_fflush_r>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	d1ed      	bne.n	80029c0 <__swbuf_r+0x2a>
 80029e4:	68a3      	ldr	r3, [r4, #8]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60a3      	str	r3, [r4, #8]
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	6022      	str	r2, [r4, #0]
 80029f0:	701e      	strb	r6, [r3, #0]
 80029f2:	6962      	ldr	r2, [r4, #20]
 80029f4:	1c43      	adds	r3, r0, #1
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d004      	beq.n	8002a04 <__swbuf_r+0x6e>
 80029fa:	89a3      	ldrh	r3, [r4, #12]
 80029fc:	07db      	lsls	r3, r3, #31
 80029fe:	d5e1      	bpl.n	80029c4 <__swbuf_r+0x2e>
 8002a00:	2e0a      	cmp	r6, #10
 8002a02:	d1df      	bne.n	80029c4 <__swbuf_r+0x2e>
 8002a04:	4621      	mov	r1, r4
 8002a06:	4628      	mov	r0, r5
 8002a08:	f000 fd1e 	bl	8003448 <_fflush_r>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d0d9      	beq.n	80029c4 <__swbuf_r+0x2e>
 8002a10:	e7d6      	b.n	80029c0 <__swbuf_r+0x2a>
	...

08002a14 <__swsetup_r>:
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	4b29      	ldr	r3, [pc, #164]	@ (8002abc <__swsetup_r+0xa8>)
 8002a18:	4605      	mov	r5, r0
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	460c      	mov	r4, r1
 8002a1e:	b118      	cbz	r0, 8002a28 <__swsetup_r+0x14>
 8002a20:	6a03      	ldr	r3, [r0, #32]
 8002a22:	b90b      	cbnz	r3, 8002a28 <__swsetup_r+0x14>
 8002a24:	f7ff fece 	bl	80027c4 <__sinit>
 8002a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a2c:	0719      	lsls	r1, r3, #28
 8002a2e:	d422      	bmi.n	8002a76 <__swsetup_r+0x62>
 8002a30:	06da      	lsls	r2, r3, #27
 8002a32:	d407      	bmi.n	8002a44 <__swsetup_r+0x30>
 8002a34:	2209      	movs	r2, #9
 8002a36:	602a      	str	r2, [r5, #0]
 8002a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	81a3      	strh	r3, [r4, #12]
 8002a42:	e033      	b.n	8002aac <__swsetup_r+0x98>
 8002a44:	0758      	lsls	r0, r3, #29
 8002a46:	d512      	bpl.n	8002a6e <__swsetup_r+0x5a>
 8002a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a4a:	b141      	cbz	r1, 8002a5e <__swsetup_r+0x4a>
 8002a4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a50:	4299      	cmp	r1, r3
 8002a52:	d002      	beq.n	8002a5a <__swsetup_r+0x46>
 8002a54:	4628      	mov	r0, r5
 8002a56:	f000 f8af 	bl	8002bb8 <_free_r>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002a64:	81a3      	strh	r3, [r4, #12]
 8002a66:	2300      	movs	r3, #0
 8002a68:	6063      	str	r3, [r4, #4]
 8002a6a:	6923      	ldr	r3, [r4, #16]
 8002a6c:	6023      	str	r3, [r4, #0]
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	81a3      	strh	r3, [r4, #12]
 8002a76:	6923      	ldr	r3, [r4, #16]
 8002a78:	b94b      	cbnz	r3, 8002a8e <__swsetup_r+0x7a>
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a84:	d003      	beq.n	8002a8e <__swsetup_r+0x7a>
 8002a86:	4621      	mov	r1, r4
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f000 fd2a 	bl	80034e2 <__smakebuf_r>
 8002a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a92:	f013 0201 	ands.w	r2, r3, #1
 8002a96:	d00a      	beq.n	8002aae <__swsetup_r+0x9a>
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60a2      	str	r2, [r4, #8]
 8002a9c:	6962      	ldr	r2, [r4, #20]
 8002a9e:	4252      	negs	r2, r2
 8002aa0:	61a2      	str	r2, [r4, #24]
 8002aa2:	6922      	ldr	r2, [r4, #16]
 8002aa4:	b942      	cbnz	r2, 8002ab8 <__swsetup_r+0xa4>
 8002aa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002aaa:	d1c5      	bne.n	8002a38 <__swsetup_r+0x24>
 8002aac:	bd38      	pop	{r3, r4, r5, pc}
 8002aae:	0799      	lsls	r1, r3, #30
 8002ab0:	bf58      	it	pl
 8002ab2:	6962      	ldrpl	r2, [r4, #20]
 8002ab4:	60a2      	str	r2, [r4, #8]
 8002ab6:	e7f4      	b.n	8002aa2 <__swsetup_r+0x8e>
 8002ab8:	2000      	movs	r0, #0
 8002aba:	e7f7      	b.n	8002aac <__swsetup_r+0x98>
 8002abc:	20000018 	.word	0x20000018

08002ac0 <memset>:
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4402      	add	r2, r0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d100      	bne.n	8002aca <memset+0xa>
 8002ac8:	4770      	bx	lr
 8002aca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ace:	e7f9      	b.n	8002ac4 <memset+0x4>

08002ad0 <_close_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	4d05      	ldr	r5, [pc, #20]	@ (8002aec <_close_r+0x1c>)
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	4608      	mov	r0, r1
 8002ada:	602b      	str	r3, [r5, #0]
 8002adc:	f7fd fe21 	bl	8000722 <_close>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	d102      	bne.n	8002aea <_close_r+0x1a>
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	b103      	cbz	r3, 8002aea <_close_r+0x1a>
 8002ae8:	6023      	str	r3, [r4, #0]
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
 8002aec:	20000284 	.word	0x20000284

08002af0 <_lseek_r>:
 8002af0:	b538      	push	{r3, r4, r5, lr}
 8002af2:	4604      	mov	r4, r0
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	2200      	movs	r2, #0
 8002afa:	4d05      	ldr	r5, [pc, #20]	@ (8002b10 <_lseek_r+0x20>)
 8002afc:	602a      	str	r2, [r5, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f7fd fe33 	bl	800076a <_lseek>
 8002b04:	1c43      	adds	r3, r0, #1
 8002b06:	d102      	bne.n	8002b0e <_lseek_r+0x1e>
 8002b08:	682b      	ldr	r3, [r5, #0]
 8002b0a:	b103      	cbz	r3, 8002b0e <_lseek_r+0x1e>
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
 8002b10:	20000284 	.word	0x20000284

08002b14 <_read_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4604      	mov	r4, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4d05      	ldr	r5, [pc, #20]	@ (8002b34 <_read_r+0x20>)
 8002b20:	602a      	str	r2, [r5, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7fd fdc4 	bl	80006b0 <_read>
 8002b28:	1c43      	adds	r3, r0, #1
 8002b2a:	d102      	bne.n	8002b32 <_read_r+0x1e>
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	b103      	cbz	r3, 8002b32 <_read_r+0x1e>
 8002b30:	6023      	str	r3, [r4, #0]
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
 8002b34:	20000284 	.word	0x20000284

08002b38 <_write_r>:
 8002b38:	b538      	push	{r3, r4, r5, lr}
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	2200      	movs	r2, #0
 8002b42:	4d05      	ldr	r5, [pc, #20]	@ (8002b58 <_write_r+0x20>)
 8002b44:	602a      	str	r2, [r5, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f7fd fdcf 	bl	80006ea <_write>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d102      	bne.n	8002b56 <_write_r+0x1e>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	b103      	cbz	r3, 8002b56 <_write_r+0x1e>
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	20000284 	.word	0x20000284

08002b5c <__errno>:
 8002b5c:	4b01      	ldr	r3, [pc, #4]	@ (8002b64 <__errno+0x8>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000018 	.word	0x20000018

08002b68 <__libc_init_array>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	4d0c      	ldr	r5, [pc, #48]	@ (8002ba0 <__libc_init_array+0x38>)
 8002b6e:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba4 <__libc_init_array+0x3c>)
 8002b70:	1b64      	subs	r4, r4, r5
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	42a6      	cmp	r6, r4
 8002b76:	d109      	bne.n	8002b8c <__libc_init_array+0x24>
 8002b78:	f000 fd30 	bl	80035dc <_init>
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	4d0a      	ldr	r5, [pc, #40]	@ (8002ba8 <__libc_init_array+0x40>)
 8002b80:	4c0a      	ldr	r4, [pc, #40]	@ (8002bac <__libc_init_array+0x44>)
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	10a4      	asrs	r4, r4, #2
 8002b86:	42a6      	cmp	r6, r4
 8002b88:	d105      	bne.n	8002b96 <__libc_init_array+0x2e>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b90:	4798      	blx	r3
 8002b92:	3601      	adds	r6, #1
 8002b94:	e7ee      	b.n	8002b74 <__libc_init_array+0xc>
 8002b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9a:	4798      	blx	r3
 8002b9c:	3601      	adds	r6, #1
 8002b9e:	e7f2      	b.n	8002b86 <__libc_init_array+0x1e>
 8002ba0:	080036f4 	.word	0x080036f4
 8002ba4:	080036f4 	.word	0x080036f4
 8002ba8:	080036f4 	.word	0x080036f4
 8002bac:	080036f8 	.word	0x080036f8

08002bb0 <__retarget_lock_init_recursive>:
 8002bb0:	4770      	bx	lr

08002bb2 <__retarget_lock_acquire_recursive>:
 8002bb2:	4770      	bx	lr

08002bb4 <__retarget_lock_release_recursive>:
 8002bb4:	4770      	bx	lr
	...

08002bb8 <_free_r>:
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	4605      	mov	r5, r0
 8002bbc:	2900      	cmp	r1, #0
 8002bbe:	d040      	beq.n	8002c42 <_free_r+0x8a>
 8002bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bc4:	1f0c      	subs	r4, r1, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bfb8      	it	lt
 8002bca:	18e4      	addlt	r4, r4, r3
 8002bcc:	f000 f8de 	bl	8002d8c <__malloc_lock>
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c44 <_free_r+0x8c>)
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	b933      	cbnz	r3, 8002be4 <_free_r+0x2c>
 8002bd6:	6063      	str	r3, [r4, #4]
 8002bd8:	6014      	str	r4, [r2, #0]
 8002bda:	4628      	mov	r0, r5
 8002bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be0:	f000 b8da 	b.w	8002d98 <__malloc_unlock>
 8002be4:	42a3      	cmp	r3, r4
 8002be6:	d908      	bls.n	8002bfa <_free_r+0x42>
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	1821      	adds	r1, r4, r0
 8002bec:	428b      	cmp	r3, r1
 8002bee:	bf01      	itttt	eq
 8002bf0:	6819      	ldreq	r1, [r3, #0]
 8002bf2:	685b      	ldreq	r3, [r3, #4]
 8002bf4:	1809      	addeq	r1, r1, r0
 8002bf6:	6021      	streq	r1, [r4, #0]
 8002bf8:	e7ed      	b.n	8002bd6 <_free_r+0x1e>
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b10b      	cbz	r3, 8002c04 <_free_r+0x4c>
 8002c00:	42a3      	cmp	r3, r4
 8002c02:	d9fa      	bls.n	8002bfa <_free_r+0x42>
 8002c04:	6811      	ldr	r1, [r2, #0]
 8002c06:	1850      	adds	r0, r2, r1
 8002c08:	42a0      	cmp	r0, r4
 8002c0a:	d10b      	bne.n	8002c24 <_free_r+0x6c>
 8002c0c:	6820      	ldr	r0, [r4, #0]
 8002c0e:	4401      	add	r1, r0
 8002c10:	1850      	adds	r0, r2, r1
 8002c12:	4283      	cmp	r3, r0
 8002c14:	6011      	str	r1, [r2, #0]
 8002c16:	d1e0      	bne.n	8002bda <_free_r+0x22>
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4408      	add	r0, r1
 8002c1e:	6010      	str	r0, [r2, #0]
 8002c20:	6053      	str	r3, [r2, #4]
 8002c22:	e7da      	b.n	8002bda <_free_r+0x22>
 8002c24:	d902      	bls.n	8002c2c <_free_r+0x74>
 8002c26:	230c      	movs	r3, #12
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	e7d6      	b.n	8002bda <_free_r+0x22>
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	1821      	adds	r1, r4, r0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	bf01      	itttt	eq
 8002c34:	6819      	ldreq	r1, [r3, #0]
 8002c36:	685b      	ldreq	r3, [r3, #4]
 8002c38:	1809      	addeq	r1, r1, r0
 8002c3a:	6021      	streq	r1, [r4, #0]
 8002c3c:	6063      	str	r3, [r4, #4]
 8002c3e:	6054      	str	r4, [r2, #4]
 8002c40:	e7cb      	b.n	8002bda <_free_r+0x22>
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	20000290 	.word	0x20000290

08002c48 <sbrk_aligned>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c88 <sbrk_aligned+0x40>)
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	6831      	ldr	r1, [r6, #0]
 8002c50:	4605      	mov	r5, r0
 8002c52:	b911      	cbnz	r1, 8002c5a <sbrk_aligned+0x12>
 8002c54:	f000 fca4 	bl	80035a0 <_sbrk_r>
 8002c58:	6030      	str	r0, [r6, #0]
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f000 fc9f 	bl	80035a0 <_sbrk_r>
 8002c62:	1c43      	adds	r3, r0, #1
 8002c64:	d103      	bne.n	8002c6e <sbrk_aligned+0x26>
 8002c66:	f04f 34ff 	mov.w	r4, #4294967295
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
 8002c6e:	1cc4      	adds	r4, r0, #3
 8002c70:	f024 0403 	bic.w	r4, r4, #3
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d0f8      	beq.n	8002c6a <sbrk_aligned+0x22>
 8002c78:	1a21      	subs	r1, r4, r0
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f000 fc90 	bl	80035a0 <_sbrk_r>
 8002c80:	3001      	adds	r0, #1
 8002c82:	d1f2      	bne.n	8002c6a <sbrk_aligned+0x22>
 8002c84:	e7ef      	b.n	8002c66 <sbrk_aligned+0x1e>
 8002c86:	bf00      	nop
 8002c88:	2000028c 	.word	0x2000028c

08002c8c <_malloc_r>:
 8002c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c90:	1ccd      	adds	r5, r1, #3
 8002c92:	f025 0503 	bic.w	r5, r5, #3
 8002c96:	3508      	adds	r5, #8
 8002c98:	2d0c      	cmp	r5, #12
 8002c9a:	bf38      	it	cc
 8002c9c:	250c      	movcc	r5, #12
 8002c9e:	2d00      	cmp	r5, #0
 8002ca0:	4606      	mov	r6, r0
 8002ca2:	db01      	blt.n	8002ca8 <_malloc_r+0x1c>
 8002ca4:	42a9      	cmp	r1, r5
 8002ca6:	d904      	bls.n	8002cb2 <_malloc_r+0x26>
 8002ca8:	230c      	movs	r3, #12
 8002caa:	6033      	str	r3, [r6, #0]
 8002cac:	2000      	movs	r0, #0
 8002cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d88 <_malloc_r+0xfc>
 8002cb6:	f000 f869 	bl	8002d8c <__malloc_lock>
 8002cba:	f8d8 3000 	ldr.w	r3, [r8]
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	bb44      	cbnz	r4, 8002d14 <_malloc_r+0x88>
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f7ff ffbf 	bl	8002c48 <sbrk_aligned>
 8002cca:	1c43      	adds	r3, r0, #1
 8002ccc:	4604      	mov	r4, r0
 8002cce:	d158      	bne.n	8002d82 <_malloc_r+0xf6>
 8002cd0:	f8d8 4000 	ldr.w	r4, [r8]
 8002cd4:	4627      	mov	r7, r4
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d143      	bne.n	8002d62 <_malloc_r+0xd6>
 8002cda:	2c00      	cmp	r4, #0
 8002cdc:	d04b      	beq.n	8002d76 <_malloc_r+0xea>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	4639      	mov	r1, r7
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	eb04 0903 	add.w	r9, r4, r3
 8002ce8:	f000 fc5a 	bl	80035a0 <_sbrk_r>
 8002cec:	4581      	cmp	r9, r0
 8002cee:	d142      	bne.n	8002d76 <_malloc_r+0xea>
 8002cf0:	6821      	ldr	r1, [r4, #0]
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	1a6d      	subs	r5, r5, r1
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	f7ff ffa6 	bl	8002c48 <sbrk_aligned>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d03a      	beq.n	8002d76 <_malloc_r+0xea>
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	442b      	add	r3, r5
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	f8d8 3000 	ldr.w	r3, [r8]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	bb62      	cbnz	r2, 8002d68 <_malloc_r+0xdc>
 8002d0e:	f8c8 7000 	str.w	r7, [r8]
 8002d12:	e00f      	b.n	8002d34 <_malloc_r+0xa8>
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	1b52      	subs	r2, r2, r5
 8002d18:	d420      	bmi.n	8002d5c <_malloc_r+0xd0>
 8002d1a:	2a0b      	cmp	r2, #11
 8002d1c:	d917      	bls.n	8002d4e <_malloc_r+0xc2>
 8002d1e:	1961      	adds	r1, r4, r5
 8002d20:	42a3      	cmp	r3, r4
 8002d22:	6025      	str	r5, [r4, #0]
 8002d24:	bf18      	it	ne
 8002d26:	6059      	strne	r1, [r3, #4]
 8002d28:	6863      	ldr	r3, [r4, #4]
 8002d2a:	bf08      	it	eq
 8002d2c:	f8c8 1000 	streq.w	r1, [r8]
 8002d30:	5162      	str	r2, [r4, r5]
 8002d32:	604b      	str	r3, [r1, #4]
 8002d34:	4630      	mov	r0, r6
 8002d36:	f000 f82f 	bl	8002d98 <__malloc_unlock>
 8002d3a:	f104 000b 	add.w	r0, r4, #11
 8002d3e:	1d23      	adds	r3, r4, #4
 8002d40:	f020 0007 	bic.w	r0, r0, #7
 8002d44:	1ac2      	subs	r2, r0, r3
 8002d46:	bf1c      	itt	ne
 8002d48:	1a1b      	subne	r3, r3, r0
 8002d4a:	50a3      	strne	r3, [r4, r2]
 8002d4c:	e7af      	b.n	8002cae <_malloc_r+0x22>
 8002d4e:	6862      	ldr	r2, [r4, #4]
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	bf0c      	ite	eq
 8002d54:	f8c8 2000 	streq.w	r2, [r8]
 8002d58:	605a      	strne	r2, [r3, #4]
 8002d5a:	e7eb      	b.n	8002d34 <_malloc_r+0xa8>
 8002d5c:	4623      	mov	r3, r4
 8002d5e:	6864      	ldr	r4, [r4, #4]
 8002d60:	e7ae      	b.n	8002cc0 <_malloc_r+0x34>
 8002d62:	463c      	mov	r4, r7
 8002d64:	687f      	ldr	r7, [r7, #4]
 8002d66:	e7b6      	b.n	8002cd6 <_malloc_r+0x4a>
 8002d68:	461a      	mov	r2, r3
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	d1fb      	bne.n	8002d68 <_malloc_r+0xdc>
 8002d70:	2300      	movs	r3, #0
 8002d72:	6053      	str	r3, [r2, #4]
 8002d74:	e7de      	b.n	8002d34 <_malloc_r+0xa8>
 8002d76:	230c      	movs	r3, #12
 8002d78:	4630      	mov	r0, r6
 8002d7a:	6033      	str	r3, [r6, #0]
 8002d7c:	f000 f80c 	bl	8002d98 <__malloc_unlock>
 8002d80:	e794      	b.n	8002cac <_malloc_r+0x20>
 8002d82:	6005      	str	r5, [r0, #0]
 8002d84:	e7d6      	b.n	8002d34 <_malloc_r+0xa8>
 8002d86:	bf00      	nop
 8002d88:	20000290 	.word	0x20000290

08002d8c <__malloc_lock>:
 8002d8c:	4801      	ldr	r0, [pc, #4]	@ (8002d94 <__malloc_lock+0x8>)
 8002d8e:	f7ff bf10 	b.w	8002bb2 <__retarget_lock_acquire_recursive>
 8002d92:	bf00      	nop
 8002d94:	20000288 	.word	0x20000288

08002d98 <__malloc_unlock>:
 8002d98:	4801      	ldr	r0, [pc, #4]	@ (8002da0 <__malloc_unlock+0x8>)
 8002d9a:	f7ff bf0b 	b.w	8002bb4 <__retarget_lock_release_recursive>
 8002d9e:	bf00      	nop
 8002da0:	20000288 	.word	0x20000288

08002da4 <__sfputc_r>:
 8002da4:	6893      	ldr	r3, [r2, #8]
 8002da6:	b410      	push	{r4}
 8002da8:	3b01      	subs	r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	6093      	str	r3, [r2, #8]
 8002dae:	da07      	bge.n	8002dc0 <__sfputc_r+0x1c>
 8002db0:	6994      	ldr	r4, [r2, #24]
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	db01      	blt.n	8002dba <__sfputc_r+0x16>
 8002db6:	290a      	cmp	r1, #10
 8002db8:	d102      	bne.n	8002dc0 <__sfputc_r+0x1c>
 8002dba:	bc10      	pop	{r4}
 8002dbc:	f7ff bdeb 	b.w	8002996 <__swbuf_r>
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	1c58      	adds	r0, r3, #1
 8002dc4:	6010      	str	r0, [r2, #0]
 8002dc6:	7019      	strb	r1, [r3, #0]
 8002dc8:	4608      	mov	r0, r1
 8002dca:	bc10      	pop	{r4}
 8002dcc:	4770      	bx	lr

08002dce <__sfputs_r>:
 8002dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	460f      	mov	r7, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	18d5      	adds	r5, r2, r3
 8002dd8:	42ac      	cmp	r4, r5
 8002dda:	d101      	bne.n	8002de0 <__sfputs_r+0x12>
 8002ddc:	2000      	movs	r0, #0
 8002dde:	e007      	b.n	8002df0 <__sfputs_r+0x22>
 8002de0:	463a      	mov	r2, r7
 8002de2:	4630      	mov	r0, r6
 8002de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de8:	f7ff ffdc 	bl	8002da4 <__sfputc_r>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d1f3      	bne.n	8002dd8 <__sfputs_r+0xa>
 8002df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002df4 <_vfiprintf_r>:
 8002df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df8:	460d      	mov	r5, r1
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	4698      	mov	r8, r3
 8002dfe:	4606      	mov	r6, r0
 8002e00:	b09d      	sub	sp, #116	@ 0x74
 8002e02:	b118      	cbz	r0, 8002e0c <_vfiprintf_r+0x18>
 8002e04:	6a03      	ldr	r3, [r0, #32]
 8002e06:	b90b      	cbnz	r3, 8002e0c <_vfiprintf_r+0x18>
 8002e08:	f7ff fcdc 	bl	80027c4 <__sinit>
 8002e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e0e:	07d9      	lsls	r1, r3, #31
 8002e10:	d405      	bmi.n	8002e1e <_vfiprintf_r+0x2a>
 8002e12:	89ab      	ldrh	r3, [r5, #12]
 8002e14:	059a      	lsls	r2, r3, #22
 8002e16:	d402      	bmi.n	8002e1e <_vfiprintf_r+0x2a>
 8002e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e1a:	f7ff feca 	bl	8002bb2 <__retarget_lock_acquire_recursive>
 8002e1e:	89ab      	ldrh	r3, [r5, #12]
 8002e20:	071b      	lsls	r3, r3, #28
 8002e22:	d501      	bpl.n	8002e28 <_vfiprintf_r+0x34>
 8002e24:	692b      	ldr	r3, [r5, #16]
 8002e26:	b99b      	cbnz	r3, 8002e50 <_vfiprintf_r+0x5c>
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	f7ff fdf2 	bl	8002a14 <__swsetup_r>
 8002e30:	b170      	cbz	r0, 8002e50 <_vfiprintf_r+0x5c>
 8002e32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e34:	07dc      	lsls	r4, r3, #31
 8002e36:	d504      	bpl.n	8002e42 <_vfiprintf_r+0x4e>
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	b01d      	add	sp, #116	@ 0x74
 8002e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e42:	89ab      	ldrh	r3, [r5, #12]
 8002e44:	0598      	lsls	r0, r3, #22
 8002e46:	d4f7      	bmi.n	8002e38 <_vfiprintf_r+0x44>
 8002e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e4a:	f7ff feb3 	bl	8002bb4 <__retarget_lock_release_recursive>
 8002e4e:	e7f3      	b.n	8002e38 <_vfiprintf_r+0x44>
 8002e50:	2300      	movs	r3, #0
 8002e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e54:	2320      	movs	r3, #32
 8002e56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e5a:	2330      	movs	r3, #48	@ 0x30
 8002e5c:	f04f 0901 	mov.w	r9, #1
 8002e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003010 <_vfiprintf_r+0x21c>
 8002e68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e6c:	4623      	mov	r3, r4
 8002e6e:	469a      	mov	sl, r3
 8002e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e74:	b10a      	cbz	r2, 8002e7a <_vfiprintf_r+0x86>
 8002e76:	2a25      	cmp	r2, #37	@ 0x25
 8002e78:	d1f9      	bne.n	8002e6e <_vfiprintf_r+0x7a>
 8002e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8002e7e:	d00b      	beq.n	8002e98 <_vfiprintf_r+0xa4>
 8002e80:	465b      	mov	r3, fp
 8002e82:	4622      	mov	r2, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	4630      	mov	r0, r6
 8002e88:	f7ff ffa1 	bl	8002dce <__sfputs_r>
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	f000 80a7 	beq.w	8002fe0 <_vfiprintf_r+0x1ec>
 8002e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e94:	445a      	add	r2, fp
 8002e96:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e98:	f89a 3000 	ldrb.w	r3, [sl]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 809f 	beq.w	8002fe0 <_vfiprintf_r+0x1ec>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eac:	f10a 0a01 	add.w	sl, sl, #1
 8002eb0:	9304      	str	r3, [sp, #16]
 8002eb2:	9307      	str	r3, [sp, #28]
 8002eb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002eb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8002eba:	4654      	mov	r4, sl
 8002ebc:	2205      	movs	r2, #5
 8002ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec2:	4853      	ldr	r0, [pc, #332]	@ (8003010 <_vfiprintf_r+0x21c>)
 8002ec4:	f000 fb7c 	bl	80035c0 <memchr>
 8002ec8:	9a04      	ldr	r2, [sp, #16]
 8002eca:	b9d8      	cbnz	r0, 8002f04 <_vfiprintf_r+0x110>
 8002ecc:	06d1      	lsls	r1, r2, #27
 8002ece:	bf44      	itt	mi
 8002ed0:	2320      	movmi	r3, #32
 8002ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ed6:	0713      	lsls	r3, r2, #28
 8002ed8:	bf44      	itt	mi
 8002eda:	232b      	movmi	r3, #43	@ 0x2b
 8002edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ee6:	d015      	beq.n	8002f14 <_vfiprintf_r+0x120>
 8002ee8:	4654      	mov	r4, sl
 8002eea:	2000      	movs	r0, #0
 8002eec:	f04f 0c0a 	mov.w	ip, #10
 8002ef0:	9a07      	ldr	r2, [sp, #28]
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ef8:	3b30      	subs	r3, #48	@ 0x30
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	d94b      	bls.n	8002f96 <_vfiprintf_r+0x1a2>
 8002efe:	b1b0      	cbz	r0, 8002f2e <_vfiprintf_r+0x13a>
 8002f00:	9207      	str	r2, [sp, #28]
 8002f02:	e014      	b.n	8002f2e <_vfiprintf_r+0x13a>
 8002f04:	eba0 0308 	sub.w	r3, r0, r8
 8002f08:	fa09 f303 	lsl.w	r3, r9, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	46a2      	mov	sl, r4
 8002f10:	9304      	str	r3, [sp, #16]
 8002f12:	e7d2      	b.n	8002eba <_vfiprintf_r+0xc6>
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	1d19      	adds	r1, r3, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	9103      	str	r1, [sp, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bfbb      	ittet	lt
 8002f20:	425b      	neglt	r3, r3
 8002f22:	f042 0202 	orrlt.w	r2, r2, #2
 8002f26:	9307      	strge	r3, [sp, #28]
 8002f28:	9307      	strlt	r3, [sp, #28]
 8002f2a:	bfb8      	it	lt
 8002f2c:	9204      	strlt	r2, [sp, #16]
 8002f2e:	7823      	ldrb	r3, [r4, #0]
 8002f30:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f32:	d10a      	bne.n	8002f4a <_vfiprintf_r+0x156>
 8002f34:	7863      	ldrb	r3, [r4, #1]
 8002f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f38:	d132      	bne.n	8002fa0 <_vfiprintf_r+0x1ac>
 8002f3a:	9b03      	ldr	r3, [sp, #12]
 8002f3c:	3402      	adds	r4, #2
 8002f3e:	1d1a      	adds	r2, r3, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	9203      	str	r2, [sp, #12]
 8002f44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f48:	9305      	str	r3, [sp, #20]
 8002f4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003014 <_vfiprintf_r+0x220>
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4650      	mov	r0, sl
 8002f52:	7821      	ldrb	r1, [r4, #0]
 8002f54:	f000 fb34 	bl	80035c0 <memchr>
 8002f58:	b138      	cbz	r0, 8002f6a <_vfiprintf_r+0x176>
 8002f5a:	2240      	movs	r2, #64	@ 0x40
 8002f5c:	9b04      	ldr	r3, [sp, #16]
 8002f5e:	eba0 000a 	sub.w	r0, r0, sl
 8002f62:	4082      	lsls	r2, r0
 8002f64:	4313      	orrs	r3, r2
 8002f66:	3401      	adds	r4, #1
 8002f68:	9304      	str	r3, [sp, #16]
 8002f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f6e:	2206      	movs	r2, #6
 8002f70:	4829      	ldr	r0, [pc, #164]	@ (8003018 <_vfiprintf_r+0x224>)
 8002f72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f76:	f000 fb23 	bl	80035c0 <memchr>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d03f      	beq.n	8002ffe <_vfiprintf_r+0x20a>
 8002f7e:	4b27      	ldr	r3, [pc, #156]	@ (800301c <_vfiprintf_r+0x228>)
 8002f80:	bb1b      	cbnz	r3, 8002fca <_vfiprintf_r+0x1d6>
 8002f82:	9b03      	ldr	r3, [sp, #12]
 8002f84:	3307      	adds	r3, #7
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	9303      	str	r3, [sp, #12]
 8002f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f90:	443b      	add	r3, r7
 8002f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f94:	e76a      	b.n	8002e6c <_vfiprintf_r+0x78>
 8002f96:	460c      	mov	r4, r1
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f9e:	e7a8      	b.n	8002ef2 <_vfiprintf_r+0xfe>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f04f 0c0a 	mov.w	ip, #10
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	3401      	adds	r4, #1
 8002faa:	9305      	str	r3, [sp, #20]
 8002fac:	4620      	mov	r0, r4
 8002fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fb2:	3a30      	subs	r2, #48	@ 0x30
 8002fb4:	2a09      	cmp	r2, #9
 8002fb6:	d903      	bls.n	8002fc0 <_vfiprintf_r+0x1cc>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0c6      	beq.n	8002f4a <_vfiprintf_r+0x156>
 8002fbc:	9105      	str	r1, [sp, #20]
 8002fbe:	e7c4      	b.n	8002f4a <_vfiprintf_r+0x156>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fc8:	e7f0      	b.n	8002fac <_vfiprintf_r+0x1b8>
 8002fca:	ab03      	add	r3, sp, #12
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	462a      	mov	r2, r5
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <_vfiprintf_r+0x22c>)
 8002fd4:	a904      	add	r1, sp, #16
 8002fd6:	f3af 8000 	nop.w
 8002fda:	4607      	mov	r7, r0
 8002fdc:	1c78      	adds	r0, r7, #1
 8002fde:	d1d6      	bne.n	8002f8e <_vfiprintf_r+0x19a>
 8002fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fe2:	07d9      	lsls	r1, r3, #31
 8002fe4:	d405      	bmi.n	8002ff2 <_vfiprintf_r+0x1fe>
 8002fe6:	89ab      	ldrh	r3, [r5, #12]
 8002fe8:	059a      	lsls	r2, r3, #22
 8002fea:	d402      	bmi.n	8002ff2 <_vfiprintf_r+0x1fe>
 8002fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fee:	f7ff fde1 	bl	8002bb4 <__retarget_lock_release_recursive>
 8002ff2:	89ab      	ldrh	r3, [r5, #12]
 8002ff4:	065b      	lsls	r3, r3, #25
 8002ff6:	f53f af1f 	bmi.w	8002e38 <_vfiprintf_r+0x44>
 8002ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ffc:	e71e      	b.n	8002e3c <_vfiprintf_r+0x48>
 8002ffe:	ab03      	add	r3, sp, #12
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	462a      	mov	r2, r5
 8003004:	4630      	mov	r0, r6
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <_vfiprintf_r+0x22c>)
 8003008:	a904      	add	r1, sp, #16
 800300a:	f000 f87d 	bl	8003108 <_printf_i>
 800300e:	e7e4      	b.n	8002fda <_vfiprintf_r+0x1e6>
 8003010:	080036be 	.word	0x080036be
 8003014:	080036c4 	.word	0x080036c4
 8003018:	080036c8 	.word	0x080036c8
 800301c:	00000000 	.word	0x00000000
 8003020:	08002dcf 	.word	0x08002dcf

08003024 <_printf_common>:
 8003024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	4616      	mov	r6, r2
 800302a:	4698      	mov	r8, r3
 800302c:	688a      	ldr	r2, [r1, #8]
 800302e:	690b      	ldr	r3, [r1, #16]
 8003030:	4607      	mov	r7, r0
 8003032:	4293      	cmp	r3, r2
 8003034:	bfb8      	it	lt
 8003036:	4613      	movlt	r3, r2
 8003038:	6033      	str	r3, [r6, #0]
 800303a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800303e:	460c      	mov	r4, r1
 8003040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003044:	b10a      	cbz	r2, 800304a <_printf_common+0x26>
 8003046:	3301      	adds	r3, #1
 8003048:	6033      	str	r3, [r6, #0]
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	0699      	lsls	r1, r3, #26
 800304e:	bf42      	ittt	mi
 8003050:	6833      	ldrmi	r3, [r6, #0]
 8003052:	3302      	addmi	r3, #2
 8003054:	6033      	strmi	r3, [r6, #0]
 8003056:	6825      	ldr	r5, [r4, #0]
 8003058:	f015 0506 	ands.w	r5, r5, #6
 800305c:	d106      	bne.n	800306c <_printf_common+0x48>
 800305e:	f104 0a19 	add.w	sl, r4, #25
 8003062:	68e3      	ldr	r3, [r4, #12]
 8003064:	6832      	ldr	r2, [r6, #0]
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	42ab      	cmp	r3, r5
 800306a:	dc2b      	bgt.n	80030c4 <_printf_common+0xa0>
 800306c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	3b00      	subs	r3, #0
 8003074:	bf18      	it	ne
 8003076:	2301      	movne	r3, #1
 8003078:	0692      	lsls	r2, r2, #26
 800307a:	d430      	bmi.n	80030de <_printf_common+0xba>
 800307c:	4641      	mov	r1, r8
 800307e:	4638      	mov	r0, r7
 8003080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003084:	47c8      	blx	r9
 8003086:	3001      	adds	r0, #1
 8003088:	d023      	beq.n	80030d2 <_printf_common+0xae>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	6922      	ldr	r2, [r4, #16]
 800308e:	f003 0306 	and.w	r3, r3, #6
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf14      	ite	ne
 8003096:	2500      	movne	r5, #0
 8003098:	6833      	ldreq	r3, [r6, #0]
 800309a:	f04f 0600 	mov.w	r6, #0
 800309e:	bf08      	it	eq
 80030a0:	68e5      	ldreq	r5, [r4, #12]
 80030a2:	f104 041a 	add.w	r4, r4, #26
 80030a6:	bf08      	it	eq
 80030a8:	1aed      	subeq	r5, r5, r3
 80030aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030ae:	bf08      	it	eq
 80030b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bfc4      	itt	gt
 80030b8:	1a9b      	subgt	r3, r3, r2
 80030ba:	18ed      	addgt	r5, r5, r3
 80030bc:	42b5      	cmp	r5, r6
 80030be:	d11a      	bne.n	80030f6 <_printf_common+0xd2>
 80030c0:	2000      	movs	r0, #0
 80030c2:	e008      	b.n	80030d6 <_printf_common+0xb2>
 80030c4:	2301      	movs	r3, #1
 80030c6:	4652      	mov	r2, sl
 80030c8:	4641      	mov	r1, r8
 80030ca:	4638      	mov	r0, r7
 80030cc:	47c8      	blx	r9
 80030ce:	3001      	adds	r0, #1
 80030d0:	d103      	bne.n	80030da <_printf_common+0xb6>
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295
 80030d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030da:	3501      	adds	r5, #1
 80030dc:	e7c1      	b.n	8003062 <_printf_common+0x3e>
 80030de:	2030      	movs	r0, #48	@ 0x30
 80030e0:	18e1      	adds	r1, r4, r3
 80030e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030ec:	4422      	add	r2, r4
 80030ee:	3302      	adds	r3, #2
 80030f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030f4:	e7c2      	b.n	800307c <_printf_common+0x58>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4622      	mov	r2, r4
 80030fa:	4641      	mov	r1, r8
 80030fc:	4638      	mov	r0, r7
 80030fe:	47c8      	blx	r9
 8003100:	3001      	adds	r0, #1
 8003102:	d0e6      	beq.n	80030d2 <_printf_common+0xae>
 8003104:	3601      	adds	r6, #1
 8003106:	e7d9      	b.n	80030bc <_printf_common+0x98>

08003108 <_printf_i>:
 8003108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800310c:	7e0f      	ldrb	r7, [r1, #24]
 800310e:	4691      	mov	r9, r2
 8003110:	2f78      	cmp	r7, #120	@ 0x78
 8003112:	4680      	mov	r8, r0
 8003114:	460c      	mov	r4, r1
 8003116:	469a      	mov	sl, r3
 8003118:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800311a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800311e:	d807      	bhi.n	8003130 <_printf_i+0x28>
 8003120:	2f62      	cmp	r7, #98	@ 0x62
 8003122:	d80a      	bhi.n	800313a <_printf_i+0x32>
 8003124:	2f00      	cmp	r7, #0
 8003126:	f000 80d3 	beq.w	80032d0 <_printf_i+0x1c8>
 800312a:	2f58      	cmp	r7, #88	@ 0x58
 800312c:	f000 80ba 	beq.w	80032a4 <_printf_i+0x19c>
 8003130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003138:	e03a      	b.n	80031b0 <_printf_i+0xa8>
 800313a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800313e:	2b15      	cmp	r3, #21
 8003140:	d8f6      	bhi.n	8003130 <_printf_i+0x28>
 8003142:	a101      	add	r1, pc, #4	@ (adr r1, 8003148 <_printf_i+0x40>)
 8003144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003148:	080031a1 	.word	0x080031a1
 800314c:	080031b5 	.word	0x080031b5
 8003150:	08003131 	.word	0x08003131
 8003154:	08003131 	.word	0x08003131
 8003158:	08003131 	.word	0x08003131
 800315c:	08003131 	.word	0x08003131
 8003160:	080031b5 	.word	0x080031b5
 8003164:	08003131 	.word	0x08003131
 8003168:	08003131 	.word	0x08003131
 800316c:	08003131 	.word	0x08003131
 8003170:	08003131 	.word	0x08003131
 8003174:	080032b7 	.word	0x080032b7
 8003178:	080031df 	.word	0x080031df
 800317c:	08003271 	.word	0x08003271
 8003180:	08003131 	.word	0x08003131
 8003184:	08003131 	.word	0x08003131
 8003188:	080032d9 	.word	0x080032d9
 800318c:	08003131 	.word	0x08003131
 8003190:	080031df 	.word	0x080031df
 8003194:	08003131 	.word	0x08003131
 8003198:	08003131 	.word	0x08003131
 800319c:	08003279 	.word	0x08003279
 80031a0:	6833      	ldr	r3, [r6, #0]
 80031a2:	1d1a      	adds	r2, r3, #4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6032      	str	r2, [r6, #0]
 80031a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031b0:	2301      	movs	r3, #1
 80031b2:	e09e      	b.n	80032f2 <_printf_i+0x1ea>
 80031b4:	6833      	ldr	r3, [r6, #0]
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	1d19      	adds	r1, r3, #4
 80031ba:	6031      	str	r1, [r6, #0]
 80031bc:	0606      	lsls	r6, r0, #24
 80031be:	d501      	bpl.n	80031c4 <_printf_i+0xbc>
 80031c0:	681d      	ldr	r5, [r3, #0]
 80031c2:	e003      	b.n	80031cc <_printf_i+0xc4>
 80031c4:	0645      	lsls	r5, r0, #25
 80031c6:	d5fb      	bpl.n	80031c0 <_printf_i+0xb8>
 80031c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	da03      	bge.n	80031d8 <_printf_i+0xd0>
 80031d0:	232d      	movs	r3, #45	@ 0x2d
 80031d2:	426d      	negs	r5, r5
 80031d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031d8:	230a      	movs	r3, #10
 80031da:	4859      	ldr	r0, [pc, #356]	@ (8003340 <_printf_i+0x238>)
 80031dc:	e011      	b.n	8003202 <_printf_i+0xfa>
 80031de:	6821      	ldr	r1, [r4, #0]
 80031e0:	6833      	ldr	r3, [r6, #0]
 80031e2:	0608      	lsls	r0, r1, #24
 80031e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80031e8:	d402      	bmi.n	80031f0 <_printf_i+0xe8>
 80031ea:	0649      	lsls	r1, r1, #25
 80031ec:	bf48      	it	mi
 80031ee:	b2ad      	uxthmi	r5, r5
 80031f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80031f2:	6033      	str	r3, [r6, #0]
 80031f4:	bf14      	ite	ne
 80031f6:	230a      	movne	r3, #10
 80031f8:	2308      	moveq	r3, #8
 80031fa:	4851      	ldr	r0, [pc, #324]	@ (8003340 <_printf_i+0x238>)
 80031fc:	2100      	movs	r1, #0
 80031fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003202:	6866      	ldr	r6, [r4, #4]
 8003204:	2e00      	cmp	r6, #0
 8003206:	bfa8      	it	ge
 8003208:	6821      	ldrge	r1, [r4, #0]
 800320a:	60a6      	str	r6, [r4, #8]
 800320c:	bfa4      	itt	ge
 800320e:	f021 0104 	bicge.w	r1, r1, #4
 8003212:	6021      	strge	r1, [r4, #0]
 8003214:	b90d      	cbnz	r5, 800321a <_printf_i+0x112>
 8003216:	2e00      	cmp	r6, #0
 8003218:	d04b      	beq.n	80032b2 <_printf_i+0x1aa>
 800321a:	4616      	mov	r6, r2
 800321c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003220:	fb03 5711 	mls	r7, r3, r1, r5
 8003224:	5dc7      	ldrb	r7, [r0, r7]
 8003226:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800322a:	462f      	mov	r7, r5
 800322c:	42bb      	cmp	r3, r7
 800322e:	460d      	mov	r5, r1
 8003230:	d9f4      	bls.n	800321c <_printf_i+0x114>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d10b      	bne.n	800324e <_printf_i+0x146>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	07df      	lsls	r7, r3, #31
 800323a:	d508      	bpl.n	800324e <_printf_i+0x146>
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	6861      	ldr	r1, [r4, #4]
 8003240:	4299      	cmp	r1, r3
 8003242:	bfde      	ittt	le
 8003244:	2330      	movle	r3, #48	@ 0x30
 8003246:	f806 3c01 	strble.w	r3, [r6, #-1]
 800324a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800324e:	1b92      	subs	r2, r2, r6
 8003250:	6122      	str	r2, [r4, #16]
 8003252:	464b      	mov	r3, r9
 8003254:	4621      	mov	r1, r4
 8003256:	4640      	mov	r0, r8
 8003258:	f8cd a000 	str.w	sl, [sp]
 800325c:	aa03      	add	r2, sp, #12
 800325e:	f7ff fee1 	bl	8003024 <_printf_common>
 8003262:	3001      	adds	r0, #1
 8003264:	d14a      	bne.n	80032fc <_printf_i+0x1f4>
 8003266:	f04f 30ff 	mov.w	r0, #4294967295
 800326a:	b004      	add	sp, #16
 800326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	f043 0320 	orr.w	r3, r3, #32
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	2778      	movs	r7, #120	@ 0x78
 800327a:	4832      	ldr	r0, [pc, #200]	@ (8003344 <_printf_i+0x23c>)
 800327c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	6831      	ldr	r1, [r6, #0]
 8003284:	061f      	lsls	r7, r3, #24
 8003286:	f851 5b04 	ldr.w	r5, [r1], #4
 800328a:	d402      	bmi.n	8003292 <_printf_i+0x18a>
 800328c:	065f      	lsls	r7, r3, #25
 800328e:	bf48      	it	mi
 8003290:	b2ad      	uxthmi	r5, r5
 8003292:	6031      	str	r1, [r6, #0]
 8003294:	07d9      	lsls	r1, r3, #31
 8003296:	bf44      	itt	mi
 8003298:	f043 0320 	orrmi.w	r3, r3, #32
 800329c:	6023      	strmi	r3, [r4, #0]
 800329e:	b11d      	cbz	r5, 80032a8 <_printf_i+0x1a0>
 80032a0:	2310      	movs	r3, #16
 80032a2:	e7ab      	b.n	80031fc <_printf_i+0xf4>
 80032a4:	4826      	ldr	r0, [pc, #152]	@ (8003340 <_printf_i+0x238>)
 80032a6:	e7e9      	b.n	800327c <_printf_i+0x174>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	f023 0320 	bic.w	r3, r3, #32
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	e7f6      	b.n	80032a0 <_printf_i+0x198>
 80032b2:	4616      	mov	r6, r2
 80032b4:	e7bd      	b.n	8003232 <_printf_i+0x12a>
 80032b6:	6833      	ldr	r3, [r6, #0]
 80032b8:	6825      	ldr	r5, [r4, #0]
 80032ba:	1d18      	adds	r0, r3, #4
 80032bc:	6961      	ldr	r1, [r4, #20]
 80032be:	6030      	str	r0, [r6, #0]
 80032c0:	062e      	lsls	r6, r5, #24
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	d501      	bpl.n	80032ca <_printf_i+0x1c2>
 80032c6:	6019      	str	r1, [r3, #0]
 80032c8:	e002      	b.n	80032d0 <_printf_i+0x1c8>
 80032ca:	0668      	lsls	r0, r5, #25
 80032cc:	d5fb      	bpl.n	80032c6 <_printf_i+0x1be>
 80032ce:	8019      	strh	r1, [r3, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	4616      	mov	r6, r2
 80032d4:	6123      	str	r3, [r4, #16]
 80032d6:	e7bc      	b.n	8003252 <_printf_i+0x14a>
 80032d8:	6833      	ldr	r3, [r6, #0]
 80032da:	2100      	movs	r1, #0
 80032dc:	1d1a      	adds	r2, r3, #4
 80032de:	6032      	str	r2, [r6, #0]
 80032e0:	681e      	ldr	r6, [r3, #0]
 80032e2:	6862      	ldr	r2, [r4, #4]
 80032e4:	4630      	mov	r0, r6
 80032e6:	f000 f96b 	bl	80035c0 <memchr>
 80032ea:	b108      	cbz	r0, 80032f0 <_printf_i+0x1e8>
 80032ec:	1b80      	subs	r0, r0, r6
 80032ee:	6060      	str	r0, [r4, #4]
 80032f0:	6863      	ldr	r3, [r4, #4]
 80032f2:	6123      	str	r3, [r4, #16]
 80032f4:	2300      	movs	r3, #0
 80032f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032fa:	e7aa      	b.n	8003252 <_printf_i+0x14a>
 80032fc:	4632      	mov	r2, r6
 80032fe:	4649      	mov	r1, r9
 8003300:	4640      	mov	r0, r8
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	47d0      	blx	sl
 8003306:	3001      	adds	r0, #1
 8003308:	d0ad      	beq.n	8003266 <_printf_i+0x15e>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	079b      	lsls	r3, r3, #30
 800330e:	d413      	bmi.n	8003338 <_printf_i+0x230>
 8003310:	68e0      	ldr	r0, [r4, #12]
 8003312:	9b03      	ldr	r3, [sp, #12]
 8003314:	4298      	cmp	r0, r3
 8003316:	bfb8      	it	lt
 8003318:	4618      	movlt	r0, r3
 800331a:	e7a6      	b.n	800326a <_printf_i+0x162>
 800331c:	2301      	movs	r3, #1
 800331e:	4632      	mov	r2, r6
 8003320:	4649      	mov	r1, r9
 8003322:	4640      	mov	r0, r8
 8003324:	47d0      	blx	sl
 8003326:	3001      	adds	r0, #1
 8003328:	d09d      	beq.n	8003266 <_printf_i+0x15e>
 800332a:	3501      	adds	r5, #1
 800332c:	68e3      	ldr	r3, [r4, #12]
 800332e:	9903      	ldr	r1, [sp, #12]
 8003330:	1a5b      	subs	r3, r3, r1
 8003332:	42ab      	cmp	r3, r5
 8003334:	dcf2      	bgt.n	800331c <_printf_i+0x214>
 8003336:	e7eb      	b.n	8003310 <_printf_i+0x208>
 8003338:	2500      	movs	r5, #0
 800333a:	f104 0619 	add.w	r6, r4, #25
 800333e:	e7f5      	b.n	800332c <_printf_i+0x224>
 8003340:	080036cf 	.word	0x080036cf
 8003344:	080036e0 	.word	0x080036e0

08003348 <__sflush_r>:
 8003348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	0716      	lsls	r6, r2, #28
 8003350:	4605      	mov	r5, r0
 8003352:	460c      	mov	r4, r1
 8003354:	d454      	bmi.n	8003400 <__sflush_r+0xb8>
 8003356:	684b      	ldr	r3, [r1, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	dc02      	bgt.n	8003362 <__sflush_r+0x1a>
 800335c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	dd48      	ble.n	80033f4 <__sflush_r+0xac>
 8003362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003364:	2e00      	cmp	r6, #0
 8003366:	d045      	beq.n	80033f4 <__sflush_r+0xac>
 8003368:	2300      	movs	r3, #0
 800336a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800336e:	682f      	ldr	r7, [r5, #0]
 8003370:	6a21      	ldr	r1, [r4, #32]
 8003372:	602b      	str	r3, [r5, #0]
 8003374:	d030      	beq.n	80033d8 <__sflush_r+0x90>
 8003376:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003378:	89a3      	ldrh	r3, [r4, #12]
 800337a:	0759      	lsls	r1, r3, #29
 800337c:	d505      	bpl.n	800338a <__sflush_r+0x42>
 800337e:	6863      	ldr	r3, [r4, #4]
 8003380:	1ad2      	subs	r2, r2, r3
 8003382:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003384:	b10b      	cbz	r3, 800338a <__sflush_r+0x42>
 8003386:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003388:	1ad2      	subs	r2, r2, r3
 800338a:	2300      	movs	r3, #0
 800338c:	4628      	mov	r0, r5
 800338e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003390:	6a21      	ldr	r1, [r4, #32]
 8003392:	47b0      	blx	r6
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	d106      	bne.n	80033a8 <__sflush_r+0x60>
 800339a:	6829      	ldr	r1, [r5, #0]
 800339c:	291d      	cmp	r1, #29
 800339e:	d82b      	bhi.n	80033f8 <__sflush_r+0xb0>
 80033a0:	4a28      	ldr	r2, [pc, #160]	@ (8003444 <__sflush_r+0xfc>)
 80033a2:	410a      	asrs	r2, r1
 80033a4:	07d6      	lsls	r6, r2, #31
 80033a6:	d427      	bmi.n	80033f8 <__sflush_r+0xb0>
 80033a8:	2200      	movs	r2, #0
 80033aa:	6062      	str	r2, [r4, #4]
 80033ac:	6922      	ldr	r2, [r4, #16]
 80033ae:	04d9      	lsls	r1, r3, #19
 80033b0:	6022      	str	r2, [r4, #0]
 80033b2:	d504      	bpl.n	80033be <__sflush_r+0x76>
 80033b4:	1c42      	adds	r2, r0, #1
 80033b6:	d101      	bne.n	80033bc <__sflush_r+0x74>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b903      	cbnz	r3, 80033be <__sflush_r+0x76>
 80033bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80033be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033c0:	602f      	str	r7, [r5, #0]
 80033c2:	b1b9      	cbz	r1, 80033f4 <__sflush_r+0xac>
 80033c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033c8:	4299      	cmp	r1, r3
 80033ca:	d002      	beq.n	80033d2 <__sflush_r+0x8a>
 80033cc:	4628      	mov	r0, r5
 80033ce:	f7ff fbf3 	bl	8002bb8 <_free_r>
 80033d2:	2300      	movs	r3, #0
 80033d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80033d6:	e00d      	b.n	80033f4 <__sflush_r+0xac>
 80033d8:	2301      	movs	r3, #1
 80033da:	4628      	mov	r0, r5
 80033dc:	47b0      	blx	r6
 80033de:	4602      	mov	r2, r0
 80033e0:	1c50      	adds	r0, r2, #1
 80033e2:	d1c9      	bne.n	8003378 <__sflush_r+0x30>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0c6      	beq.n	8003378 <__sflush_r+0x30>
 80033ea:	2b1d      	cmp	r3, #29
 80033ec:	d001      	beq.n	80033f2 <__sflush_r+0xaa>
 80033ee:	2b16      	cmp	r3, #22
 80033f0:	d11d      	bne.n	800342e <__sflush_r+0xe6>
 80033f2:	602f      	str	r7, [r5, #0]
 80033f4:	2000      	movs	r0, #0
 80033f6:	e021      	b.n	800343c <__sflush_r+0xf4>
 80033f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033fc:	b21b      	sxth	r3, r3
 80033fe:	e01a      	b.n	8003436 <__sflush_r+0xee>
 8003400:	690f      	ldr	r7, [r1, #16]
 8003402:	2f00      	cmp	r7, #0
 8003404:	d0f6      	beq.n	80033f4 <__sflush_r+0xac>
 8003406:	0793      	lsls	r3, r2, #30
 8003408:	bf18      	it	ne
 800340a:	2300      	movne	r3, #0
 800340c:	680e      	ldr	r6, [r1, #0]
 800340e:	bf08      	it	eq
 8003410:	694b      	ldreq	r3, [r1, #20]
 8003412:	1bf6      	subs	r6, r6, r7
 8003414:	600f      	str	r7, [r1, #0]
 8003416:	608b      	str	r3, [r1, #8]
 8003418:	2e00      	cmp	r6, #0
 800341a:	ddeb      	ble.n	80033f4 <__sflush_r+0xac>
 800341c:	4633      	mov	r3, r6
 800341e:	463a      	mov	r2, r7
 8003420:	4628      	mov	r0, r5
 8003422:	6a21      	ldr	r1, [r4, #32]
 8003424:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003428:	47e0      	blx	ip
 800342a:	2800      	cmp	r0, #0
 800342c:	dc07      	bgt.n	800343e <__sflush_r+0xf6>
 800342e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003436:	f04f 30ff 	mov.w	r0, #4294967295
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343e:	4407      	add	r7, r0
 8003440:	1a36      	subs	r6, r6, r0
 8003442:	e7e9      	b.n	8003418 <__sflush_r+0xd0>
 8003444:	dfbffffe 	.word	0xdfbffffe

08003448 <_fflush_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	690b      	ldr	r3, [r1, #16]
 800344c:	4605      	mov	r5, r0
 800344e:	460c      	mov	r4, r1
 8003450:	b913      	cbnz	r3, 8003458 <_fflush_r+0x10>
 8003452:	2500      	movs	r5, #0
 8003454:	4628      	mov	r0, r5
 8003456:	bd38      	pop	{r3, r4, r5, pc}
 8003458:	b118      	cbz	r0, 8003462 <_fflush_r+0x1a>
 800345a:	6a03      	ldr	r3, [r0, #32]
 800345c:	b90b      	cbnz	r3, 8003462 <_fflush_r+0x1a>
 800345e:	f7ff f9b1 	bl	80027c4 <__sinit>
 8003462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f3      	beq.n	8003452 <_fflush_r+0xa>
 800346a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800346c:	07d0      	lsls	r0, r2, #31
 800346e:	d404      	bmi.n	800347a <_fflush_r+0x32>
 8003470:	0599      	lsls	r1, r3, #22
 8003472:	d402      	bmi.n	800347a <_fflush_r+0x32>
 8003474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003476:	f7ff fb9c 	bl	8002bb2 <__retarget_lock_acquire_recursive>
 800347a:	4628      	mov	r0, r5
 800347c:	4621      	mov	r1, r4
 800347e:	f7ff ff63 	bl	8003348 <__sflush_r>
 8003482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003484:	4605      	mov	r5, r0
 8003486:	07da      	lsls	r2, r3, #31
 8003488:	d4e4      	bmi.n	8003454 <_fflush_r+0xc>
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	059b      	lsls	r3, r3, #22
 800348e:	d4e1      	bmi.n	8003454 <_fflush_r+0xc>
 8003490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003492:	f7ff fb8f 	bl	8002bb4 <__retarget_lock_release_recursive>
 8003496:	e7dd      	b.n	8003454 <_fflush_r+0xc>

08003498 <__swhatbuf_r>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	460c      	mov	r4, r1
 800349c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a0:	4615      	mov	r5, r2
 80034a2:	2900      	cmp	r1, #0
 80034a4:	461e      	mov	r6, r3
 80034a6:	b096      	sub	sp, #88	@ 0x58
 80034a8:	da0c      	bge.n	80034c4 <__swhatbuf_r+0x2c>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	2100      	movs	r1, #0
 80034ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80034b2:	bf14      	ite	ne
 80034b4:	2340      	movne	r3, #64	@ 0x40
 80034b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80034ba:	2000      	movs	r0, #0
 80034bc:	6031      	str	r1, [r6, #0]
 80034be:	602b      	str	r3, [r5, #0]
 80034c0:	b016      	add	sp, #88	@ 0x58
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	466a      	mov	r2, sp
 80034c6:	f000 f849 	bl	800355c <_fstat_r>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	dbed      	blt.n	80034aa <__swhatbuf_r+0x12>
 80034ce:	9901      	ldr	r1, [sp, #4]
 80034d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80034d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80034d8:	4259      	negs	r1, r3
 80034da:	4159      	adcs	r1, r3
 80034dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034e0:	e7eb      	b.n	80034ba <__swhatbuf_r+0x22>

080034e2 <__smakebuf_r>:
 80034e2:	898b      	ldrh	r3, [r1, #12]
 80034e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034e6:	079d      	lsls	r5, r3, #30
 80034e8:	4606      	mov	r6, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	d507      	bpl.n	80034fe <__smakebuf_r+0x1c>
 80034ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80034f2:	6023      	str	r3, [r4, #0]
 80034f4:	6123      	str	r3, [r4, #16]
 80034f6:	2301      	movs	r3, #1
 80034f8:	6163      	str	r3, [r4, #20]
 80034fa:	b003      	add	sp, #12
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fe:	466a      	mov	r2, sp
 8003500:	ab01      	add	r3, sp, #4
 8003502:	f7ff ffc9 	bl	8003498 <__swhatbuf_r>
 8003506:	9f00      	ldr	r7, [sp, #0]
 8003508:	4605      	mov	r5, r0
 800350a:	4639      	mov	r1, r7
 800350c:	4630      	mov	r0, r6
 800350e:	f7ff fbbd 	bl	8002c8c <_malloc_r>
 8003512:	b948      	cbnz	r0, 8003528 <__smakebuf_r+0x46>
 8003514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003518:	059a      	lsls	r2, r3, #22
 800351a:	d4ee      	bmi.n	80034fa <__smakebuf_r+0x18>
 800351c:	f023 0303 	bic.w	r3, r3, #3
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	e7e2      	b.n	80034ee <__smakebuf_r+0xc>
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800352e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003532:	81a3      	strh	r3, [r4, #12]
 8003534:	9b01      	ldr	r3, [sp, #4]
 8003536:	6020      	str	r0, [r4, #0]
 8003538:	b15b      	cbz	r3, 8003552 <__smakebuf_r+0x70>
 800353a:	4630      	mov	r0, r6
 800353c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003540:	f000 f81e 	bl	8003580 <_isatty_r>
 8003544:	b128      	cbz	r0, 8003552 <__smakebuf_r+0x70>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f023 0303 	bic.w	r3, r3, #3
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	81a3      	strh	r3, [r4, #12]
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	431d      	orrs	r5, r3
 8003556:	81a5      	strh	r5, [r4, #12]
 8003558:	e7cf      	b.n	80034fa <__smakebuf_r+0x18>
	...

0800355c <_fstat_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	2300      	movs	r3, #0
 8003560:	4d06      	ldr	r5, [pc, #24]	@ (800357c <_fstat_r+0x20>)
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	602b      	str	r3, [r5, #0]
 800356a:	f7fd f8e5 	bl	8000738 <_fstat>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	d102      	bne.n	8003578 <_fstat_r+0x1c>
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	b103      	cbz	r3, 8003578 <_fstat_r+0x1c>
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	bd38      	pop	{r3, r4, r5, pc}
 800357a:	bf00      	nop
 800357c:	20000284 	.word	0x20000284

08003580 <_isatty_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	2300      	movs	r3, #0
 8003584:	4d05      	ldr	r5, [pc, #20]	@ (800359c <_isatty_r+0x1c>)
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	602b      	str	r3, [r5, #0]
 800358c:	f7fd f8e3 	bl	8000756 <_isatty>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_isatty_r+0x1a>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	b103      	cbz	r3, 800359a <_isatty_r+0x1a>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	20000284 	.word	0x20000284

080035a0 <_sbrk_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	2300      	movs	r3, #0
 80035a4:	4d05      	ldr	r5, [pc, #20]	@ (80035bc <_sbrk_r+0x1c>)
 80035a6:	4604      	mov	r4, r0
 80035a8:	4608      	mov	r0, r1
 80035aa:	602b      	str	r3, [r5, #0]
 80035ac:	f7fd f8ea 	bl	8000784 <_sbrk>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_sbrk_r+0x1a>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_sbrk_r+0x1a>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20000284 	.word	0x20000284

080035c0 <memchr>:
 80035c0:	4603      	mov	r3, r0
 80035c2:	b510      	push	{r4, lr}
 80035c4:	b2c9      	uxtb	r1, r1
 80035c6:	4402      	add	r2, r0
 80035c8:	4293      	cmp	r3, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	d101      	bne.n	80035d2 <memchr+0x12>
 80035ce:	2000      	movs	r0, #0
 80035d0:	e003      	b.n	80035da <memchr+0x1a>
 80035d2:	7804      	ldrb	r4, [r0, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	428c      	cmp	r4, r1
 80035d8:	d1f6      	bne.n	80035c8 <memchr+0x8>
 80035da:	bd10      	pop	{r4, pc}

080035dc <_init>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	bf00      	nop
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr

080035e8 <_fini>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr
